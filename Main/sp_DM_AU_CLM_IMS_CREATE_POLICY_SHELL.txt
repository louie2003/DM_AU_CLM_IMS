USE [DM_IMS_AU_CLAIMS]
GO
/****** Object:  StoredProcedure [dbo].[sp_DM_AU_CLM_IMS_CREATE_POLICY_SHELL]    Script Date: 22/02/2022 1:46:43 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER procedure [dbo].[sp_DM_AU_CLM_IMS_CREATE_POLICY_SHELL]
as
begin

PRINT ''; PRINT getdate(); PRINT 'Entering Stored Procedure [DM_AU_CLM_IMS_ETL_POLICY_SHELL]' 

PRINT ''; PRINT getdate(); PRINT 'Build temp table of Policy Number from BO trying to match Policy to RiskWrite'

if OBJECT_ID('tempdb..##temp_BO_RW_Pols') is not null drop table ##temp_BO_RW_Pols

select 
distinct
bd.[Policy number] as [BO Policy Number], 
bd.[EVO] as [BO EVO],
cast(NULL AS NVARCHAR(255)) AS [RiskWrite RiskExtRef],
cast(NULL AS NVARCHAR(255)) AS [RiskWrite Riskid],

LEN(bd.[Policy number]) as Len_BO_Policy,

LEN(bd.[EVO]) as Len_BO_EVO,

case	when LEN(bd.[Policy number]) = 17 and bd.Suffix is NULL and isnumeric(SUBSTRING(bd.[Policy number],10,3)) = 1 then SUBSTRING(bd.[Policy number],10,3)
		when LEN(bd.[Policy number]) = 18 and bd.Suffix is NULL and isnumeric(SUBSTRING(bd.[Policy number],11,3)) = 1 then SUBSTRING(bd.[Policy number],11,3)
		else bd.Suffix end as [BO Policy Suffix],
		
case	when LEN(bd.[EVO]) = 17 and isnumeric(SUBSTRING(bd.[EVO],10,3)) = 1 then SUBSTRING(bd.[EVO],10,3)
		when LEN(bd.[EVO]) = 18 and isnumeric(SUBSTRING(bd.[EVO],11,3)) = 1 then SUBSTRING(bd.[EVO],11,3)
		end as [BO EVO Suffix]  

into ##temp_BO_RW_Pols
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] bd
where 1=1
-- We don't want Policies starting with AU000 as these are already in IMS
and not(LEFT(bd.[Policy number],5) = 'AU000')

--select * from ##temp_BO_RW_Pols WHERE [BO Policy Number] = 'CY-52057318J2 - ER'
--select * from ##temp_BO_RW_Pols WHERE [BO EVO] is NOT NULL


update t
set 
--select bd.[BO Policy Number], bd.[BO EVO],
	[RiskWrite RiskExtRef] = r.RiskExtRef,
	[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskid = t.[BO Policy number]
where 1=1
and not(t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO Policy Number], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskid = LEFT(t.[BO Policy Number], CHARINDEX(' ', t.[BO Policy Number]) - 0) 
where 1=1
and (t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO Policy Number], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = t.[BO Policy Number]
where 1=1
and not(t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO Policy Number], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = LEFT(t.[BO Policy Number], CHARINDEX(' ', t.[BO Policy Number]) - 0) 
where 1=1
and (t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO Policy Number], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = left(t.[BO Policy number],9)+'000'+SUBSTRING(t.[BO Policy Number],13,5) 
where 1=1
and t.[BO Policy Suffix] <> '0'
and ISNUMERIC(t.[BO Policy Suffix]) = 1
and len(t.[BO Policy Number]) = 17
and not(t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL


update t
set 
--select t.[BO Policy Number], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = left(t.[BO Policy Number],10)+'000'+SUBSTRING(t.[BO Policy Number],14,5) 
where 1=1
and t.[BO Policy Suffix] <> '0'
and ISNUMERIC(t.[BO Policy Suffix]) = 1
and len(t.[BO Policy Number]) = 18
and not(t.[BO Policy Number] like '% %')
and t.[RiskWrite Riskid] is NULL

-- EVO

update t
set 
--select t.[BO Policy Number], t.[BO EVO],
	[RiskWrite RiskExtRef] = r.RiskExtRef,
	[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskid = t.[BO EVO]
where 1=1
and not(isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO EVO], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskid = LEFT(t.[BO EVO], CHARINDEX(' ', t.[BO EVO]) - 0) 
where 1=1
and (isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO EVO], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = t.[BO EVO]
where 1=1
and not(isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO EVO], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = LEFT(t.[BO EVO], CHARINDEX(' ', t.[BO EVO]) - 0) 
where 1=1
and (isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL

update t
set 
--select t.[BO EVO], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = left(t.[BO EVO],9)+'000'+SUBSTRING(t.[BO EVO],13,5) 
where 1=1
and t.[BO EVO Suffix] <> '000'
and ISNUMERIC(t.[BO EVO Suffix]) = 1
and len(t.[BO EVO]) = 17
and not(isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL


update t
set 
--select t.[BO EVO], t.[BO EVO],
[RiskWrite RiskExtRef] = r.RiskExtRef,
[RiskWrite Riskid] = r.riskid
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = left(t.[BO EVO],10)+'000'+SUBSTRING(t.[BO EVO],14,5) 
where 1=1
and t.[BO EVO Suffix] <> '000'
and ISNUMERIC(t.[BO EVO Suffix]) = 1
and len(t.[BO EVO]) = 18
and not(isnull(t.[BO EVO],'XXXX') like '% %')
and t.[RiskWrite Riskid] is NULL


-- Delete duplicate lot where Policy Suffix, RiskExtRef and EVO are NULL
delete t2 from
--select t2.* from
(select [BO Policy Number], COUNT(*) as rowcnt
from ##temp_BO_RW_Pols  
group by [BO Policy Number] having COUNT(*) > 1) t1
inner join ##temp_BO_RW_Pols t2 on t1.[BO Policy Number] = t2.[BO Policy Number]
where 1=1
and t2.[BO EVO] is NULL
and t2.[RiskWrite RiskExtRef] is NULL
and t2.[BO Policy Suffix] is NULL
--order by t2.[BO Policy Number], [BO Policy Suffix]

-- Delete next duplicate lot where EVO is NULL
delete t2 from
--select t2.* from
(select [BO Policy Number], COUNT(*) as rowcnt
from ##temp_BO_RW_Pols  
group by [BO Policy Number] having COUNT(*) > 1) t1
inner join ##temp_BO_RW_Pols t2 on t1.[BO Policy Number] = t2.[BO Policy Number]
where 1=1
and t2.[BO EVO] is NULL
--order by t2.[BO Policy Number], [BO Policy Suffix]

-- Delete next duplicate lot where Policy Suffix is NULL
delete t2 from
--select t2.* from
(select [BO Policy Number], COUNT(*) as rowcnt
from ##temp_BO_RW_Pols  
group by [BO Policy Number] having COUNT(*) > 1) t1
inner join ##temp_BO_RW_Pols t2 on t1.[BO Policy Number] = t2.[BO Policy Number]
where 1=1
and t2.[BO Policy Suffix] is NULL
--order by t2.[BO Policy Number], [BO Policy Suffix]

-- Update temp table which cannot be matched by BO Policy Number but can be matched on Insured/Client Nane and Policy From to Cover Start Date
update t
	set
--select t.[BO Policy Number], r.riskextref, r.riskid, pvg.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [RiskWriteApac].[dbo].[client] rc on pvg.[Policy Holder] = rc.CLIENTNAME
inner join [RiskWriteApac].[dbo].[risk] r on rc.ID_CLNT = r.id_clnt and pvg.[Policy from] = r.coverstart -- and pvg.[Policy to] = r.expirydate --and pvg.[Policy to] = r.coverend
where 1=1
and t.[RiskWrite Riskid] is NULL 
--order by t.[BO Policy Number]

-- Update temp table which cannot be matched by BO Policy Number but can be matched on Insured/Client Nane and Policy From to Start Date
update t
	set
--select t.[BO Policy Number], r.riskextref, r.riskid, pvg.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [RiskWriteApac].[dbo].[client] rc on pvg.[Policy Holder] = rc.CLIENTNAME
inner join [RiskWriteApac].[dbo].[risk] r on rc.ID_CLNT = r.id_clnt and pvg.[Policy from] = r.startdate -- and pvg.[Policy to] = r.expirydate --and pvg.[Policy to] = r.coverend
where 1=1
and t.[RiskWrite Riskid] is NULL 
--order by t.[BO Policy Number]

-- Update temp table which cannot be matched by BO Policy Number but can be matched on Insured/Client Nane and Policy To to Cover End Date
update t
	set
--select t.[BO Policy Number], r.riskextref, r.riskid, pvg.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [RiskWriteApac].[dbo].[client] rc on pvg.[Policy Holder] = rc.CLIENTNAME
inner join [RiskWriteApac].[dbo].[risk] r on rc.ID_CLNT = r.id_clnt and pvg.[Policy to] = r.coverend -- r.expirydate 
where 1=1
and t.[RiskWrite Riskid] is NULL 
--order by t.[BO Policy Number]

-- Update temp table which cannot be matched by BO Policy Number but can be matched on Insured/Client Nane and Policy To to ExpiryDate
update t
	set
--select t.[BO Policy Number], r.riskextref, r.riskid, pvg.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [RiskWriteApac].[dbo].[client] rc on pvg.[Policy Holder] = rc.CLIENTNAME
inner join [RiskWriteApac].[dbo].[risk] r on rc.ID_CLNT = r.id_clnt and pvg.[Policy to] = r.expirydate 
where 1=1
and t.[RiskWrite Riskid] is NULL 
--order by t.[BO Policy Number]

-- Update temp table which cannot be matched by BO Policy Number but can be matched via FigTree Claim Pivotal Policy to RiskWrite RiskId
update t
	set	
--select t.[BO Policy Number], t.[BO EVO], fc.[FT_CLAIM_NUMBER], c.[Claim Number], fc.FT_POLICY_NUMBER, fc.FT_PIVOTAL_POLICY, r.riskextref, r.riskid, fc.FT_INCIDENT_NUMBER, fc.FT_INSURED_NAME, c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], c.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_FIGTREE_CLAIMS] fc on c.[Claim Number] = fc.[FT_CLAIM_NUMBER]
inner join [RiskWriteApac].[dbo].[risk] r on fc.FT_PIVOTAL_POLICY = r.riskid
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
--order by c.[Claim Number]

-- Update temp table which cannot be matched by BO Policy Number but can be matched via FigTree Claim Pivotal Policy to RiskWrite RiskExtRef
update t
	set	
--select t.[BO Policy Number], t.[BO EVO], fc.[FT_CLAIM_NUMBER], c.[Claim Number], fc.FT_POLICY_NUMBER, fc.FT_PIVOTAL_POLICY, r.riskextref, r.riskid, fc.FT_INCIDENT_NUMBER, fc.FT_INSURED_NAME, c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], c.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_FIGTREE_CLAIMS] fc on c.[Claim Number] = fc.[FT_CLAIM_NUMBER]
inner join [RiskWriteApac].[dbo].[risk] r on fc.FT_PIVOTAL_POLICY = r.riskextref
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
--order by c.[Claim Number]


-- Update temp table which cannot be matched by BO Policy Number but can be matched via FigTree Claim Policy No. to RiskWrite RiskId
update t
	set	
--select t.[BO Policy Number], t.[BO EVO], fc.[FT_CLAIM_NUMBER], c.[Claim Number], fc.FT_POLICY_NUMBER, fc.FT_PIVOTAL_POLICY, r.riskextref, r.riskid, fc.FT_INCIDENT_NUMBER, fc.FT_INSURED_NAME, c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], c.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_FIGTREE_CLAIMS] fc on c.[Claim Number] = fc.[FT_CLAIM_NUMBER]
inner join [RiskWriteApac].[dbo].[risk] r on fc.FT_POLICY_NUMBER = r.riskid
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
--order by c.[Claim Number]


-- Update temp table which cannot be matched by BO Policy Number but can be matched via FigTree Claim Policy No. to RiskWrite RiskId
update t
	set	
--select t.[BO Policy Number], t.[BO EVO], fc.[FT_CLAIM_NUMBER], c.[Claim Number], fc.FT_POLICY_NUMBER, fc.FT_PIVOTAL_POLICY, r.riskextref, r.riskid, fc.FT_INCIDENT_NUMBER, fc.FT_INSURED_NAME, c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], c.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_FIGTREE_CLAIMS] fc on c.[Claim Number] = fc.[FT_CLAIM_NUMBER]
inner join [RiskWriteApac].[dbo].[risk] r on fc.FT_POLICY_NUMBER = r.riskextref
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
--order by c.[Claim Number]


-- Update temp table which cannot be matched by BO Policy Number but can be matched via FigTree Policy Match process to RiskWrite RiskId
update t
	set	
--select t.[BO Policy Number], t.[BO EVO], fc.[FT_CLAIM_NUMBER], c.[Claim Number], fc.FT_POLICY_NUMBER, fc.FT_PIVOTAL_POLICY, r.riskextref, r.riskid, fc.FT_INCIDENT_NUMBER, fc.FT_INSURED_NAME, c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], c.*,
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r.riskid 
--select * 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_FIGTREE_CLAIMS] fc on c.[Claim Number] = fc.[FT_CLAIM_NUMBER]
inner join [RiskWriteApac].[dbo].[GCF020_UPDATE] gu on fc.[FT_INCIDENT_NUMBER] = gu.F_INCIDENT_NUMBER
inner join [RiskWriteApac].[dbo].[risk] r on gu.F_SPARE_CHAR_13 = r.riskid
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
--order by c.[Claim Number]


-- Update temp table which cannot be matched by BO Policy Number by changing year on Policy Number to try to find a RiskWrite match - 13 to 14
update t
	set	
--select distinct t.[BO Policy Number],
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r2.riskid
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = case when SUBSTRING(t.[BO Policy Number],14,2) = '13' then left(t.[BO Policy number],13)+'14'+SUBSTRING(t.[BO Policy Number],16,2) end 
inner join (select riskextref, MIN(riskid) as riskid from [RiskWriteApac].[dbo].[Risk] group by riskextref) r2 on r.riskextref = r2.riskextref
WHERE 1=1
and LEN(t.[BO Policy Number]) = 17
and t.[RiskWrite Riskid] is NULL


-- Update temp table which cannot be matched by BO Policy Number by changing year on Policy Number to try to find a RiskWrite match - 13 to 12
update t
	set	
--select distinct t.[BO Policy Number],
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r2.riskid
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = case when SUBSTRING(t.[BO Policy Number],14,2) = '13' then left(t.[BO Policy number],13)+'12'+SUBSTRING(t.[BO Policy Number],16,2) end 
inner join (select riskextref, MIN(riskid) as riskid from [RiskWriteApac].[dbo].[Risk] group by riskextref) r2 on r.riskextref = r2.riskextref
WHERE 1=1
and LEN(t.[BO Policy Number]) = 17
and t.[RiskWrite Riskid] is NULL


-- Update temp table which cannot be matched by BO Policy Number by changing year on Policy Number to try to find a RiskWrite match - 14 to 15
update t
	set	
--select distinct t.[BO Policy Number],
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r2.riskid
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = case when SUBSTRING(t.[BO Policy Number],14,2) = '14' then left(t.[BO Policy number],13)+'15'+SUBSTRING(t.[BO Policy Number],16,2) end 
inner join (select riskextref, MIN(riskid) as riskid from [RiskWriteApac].[dbo].[Risk] group by riskextref) r2 on r.riskextref = r2.riskextref
WHERE 1=1
and LEN(t.[BO Policy Number]) = 17
and t.[RiskWrite Riskid] is NULL


-- Update temp table which cannot be matched by BO Policy Number by changing year on Policy Number to try to find a RiskWrite match - 14 to 13
update t
	set	
--select distinct t.[BO Policy Number],
		[RiskWrite RiskExtRef] = r.RiskExtRef,
		[RiskWrite Riskid] = r2.riskid
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [RiskWriteApac].[dbo].[Risk] r on r.riskextref = case when SUBSTRING(t.[BO Policy Number],14,2) = '14' then left(t.[BO Policy number],13)+'13'+SUBSTRING(t.[BO Policy Number],16,2) end 
inner join (select riskextref, MIN(riskid) as riskid from [RiskWriteApac].[dbo].[Risk] group by riskextref) r2 on r.riskextref = r2.riskextref
WHERE 1=1
and LEN(t.[BO Policy Number]) = 17
and t.[RiskWrite Riskid] is NULL


-- Update temp table which cannot be matched by BO Policy Number to RiskWrite by direct mapping via XREF for Policies which have Claims
update t
	set	
--select distinct t.[BO Policy Number],
		[RiskWrite RiskExtRef] = xr.[RiskWrite RiskExtRef],
		[RiskWrite Riskid] =  xr.[RiskWrite Riskid]
--select *
from ##temp_BO_RW_Pols t
--inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_XREF_BO_PolNo_to_RW_Keys] xr on  t.[BO Policy Number] = xr.[BO Policy Number] and xr.[Active] = 1
left join [RiskWriteApac].[dbo].[Risk] r on xr.[RiskWrite RiskId] = r.riskid 
WHERE 1=1
and t.[RiskWrite Riskid] is NULL



-- END UPDATES -- END UPDATES -- END UPDATES -- END UPDATES -- END UPDATES -- END UPDATES -- END UPDATES 

/*

-- QUERIES -- QUERIES-- QUERIES -- QUERIES-- QUERIES -- QUERIES

-- 120 Claims where BO Policy not in RiskWrite
select t.[BO Policy Number], t.[BO EVO], c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], pvg.TransType, c.Status, c.[Total Incurred], c.*
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
order by c.[Claim Number]

-- 11 BO Policies which have a Claim where BO Policy not in RiskWrite
select distinct t.[BO Policy Number], t.[BO EVO], c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], pvg.TransType
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
order by t.[BO Policy Number]

-- 4 non-AH BO Policies which have a Claim where BO Policy not in RiskWrite - why aren't they in RiskWrite, they are current policies
select t.[BO Policy Number], t.[BO EVO], c.[Company name], pvg.[Policy Holder], pvg.[Policy from], pvg.[Policy to], pvg.TransType, c.Status, c.[Total Incurred], c.*
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO Policy Number]
WHERE 1=1
and t.[RiskWrite Riskid] is NULL
and not(pvg.Contract like '%AH%')
order by c.[Claim Number]

-- ZERO records on EVO to Claim match where EVO not in RiskWrite
select * 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_CLAIMS_PAID_RESERVES] c on c.[Policy ref.] = t.[BO EVO]
WHERE t.[RiskWrite Riskid] is NULL

-- 6,318 BO Policies cannot match to RiskWrite
select t.[BO Policy Number], left(pvg.[Policy to],11) as [Policy To], pvg.[Policy Holder], t.[BO EVO], pvg.* 
from ##temp_BO_RW_Pols t
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] pvg on t.[BO Policy Number] = pvg.[Policy number]
where 1=1
and t.[RiskWrite Riskid] is NULL 
order by pvg.[Policy To] desc
--order by t.[BO Policy Number]

select COUNT(*) from ##temp_BO_RW_Pols
select * from ##temp_BO_RW_Pols
select [BO Policy Number], COUNT(*) from ##temp_BO_RW_Pols group by [BO Policy Number] having COUNT(*) > 1
select * from ##temp_BO_RW_Pols where [RiskWrite RiskExtRef] is NULL and [RiskWrite Riskid] is NULL


select COUNT(*) from ##temp_BO_RW_Pols where [RiskWrite RiskExtRef] is NULL
select COUNT(*) from ##temp_BO_RW_Pols where [RiskWrite Riskid] is NULL


select t2.* from
(select [BO Policy Number], COUNT(*) as rowcnt
from ##temp_BO_RW_Pols  
group by [BO Policy Number] having COUNT(*) > 1) t1
inner join ##temp_BO_RW_Pols t2 on t1.[BO Policy Number] = t2.[BO Policy Number]
where 1=1
order by t2.[BO Policy Number], [BO EVO], [BO Policy Suffix]

select * 
from ##temp_BO_RW_Pols t
inner join [RiskWriteApac].[dbo].[Risk] r on t.[BO EVO] = r.riskid
where t.[RiskWrite RiskExtRef] is NULL and t.[RiskWrite Riskid] is NULL

select * from ##temp_BO_RW_Pols where [BO Policy Number] in (
'BIZ44948116H0 - CY',
'BIZ44948116H0 - ML',
'BIZ44948116H0 - PL',
'BIZ49731316H0 - ML',
'DO-28062215G0 - DO',
'EVO14642515G1 - DO',
'EVO14642515G1 - SL',
'MLW36088315H0 - ML',
'MLW36344115H0 - ML')
order by [BO Policy Number]


*/


PRINT ''; PRINT getdate(); PRINT 'Build trigger file for Policy Shell'


IF OBJECT_ID('[DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE]', 'U') IS NOT NULL
                DROP TABLE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE]


CREATE TABLE [dbo].[DM_AU_CLM_IMS_WORK_FILE](
	[Policy number] [nvarchar](255) NULL,
	[riskid] [nvarchar](255) NULL,
	[riskextref] [nvarchar](255) NULL,
	[New/Renew] [varchar](1) NOT NULL,
	[BO Insured] [nvarchar](255) NULL,
	[Insured Name] [nvarchar](800) NULL,
	[Broker Name] [nvarchar](255) NULL,
	[Broker State] [nvarchar](40) NULL,
	[EffDate] [datetime2](7) NULL,
	[ExpDate] [datetime2](7) NULL,
	[Carrier Code] [varchar](1) NOT NULL,
	[WrittenPremium] [numeric](18, 2) NULL,
	[commission] [numeric](18, 2) NULL,
	[Gross Comm Percent] [float] NULL,
	[brokerage] [numeric](18, 2) NULL,
	[Producer Comm Percent] [float] NULL,
	[Indemnity Limit] [numeric](18, 0) NULL,
	[CONTRAID] [nvarchar](100) NULL,
	[Line of Business] [nvarchar](100) NULL,
	[Policy Section] [varchar](1) NOT NULL,
	[Excess] [numeric](18, 2) NULL,
	[Primary / Excess / Coinsurance] [varchar](7) NOT NULL,
	[Binder] [nvarchar](255) NULL,
	[Insurer1Name] [nvarchar](100) NULL,
	[Insurer2Name] [nvarchar](100) NULL,
	[Insurer3Name] [nvarchar](100) NULL,
	[Insurer4Name] [nvarchar](100) NULL,
	[Currency] [varchar](3) NOT NULL,
	[Scheme] [nvarchar](255) NOT NULL,
	[Activity Code] [nvarchar](255) NOT NULL,
	[UMR] [nvarchar](255) NULL,
	[Year Letter] [nvarchar](10) NULL,
	[Year Letter New] [nvarchar](10) NULL,
	[Underwriter] [nvarchar](80) NULL,
	[BillType] [varchar](1) NOT NULL,
	[CovCode] [varchar](1) NOT NULL,
	[id_usrr_underwriter] [numeric](10, 0) NULL,
	[Broker Email] [nvarchar](2000) NULL,
	[id_risk] [numeric](10, 0) NULL,
	[GSTPercent] [float] NULL,
	[Class] [nvarchar](255) NULL,
	[RefPayToDual] [nvarchar](20) NULL,
	[RiskWrite Product]  [nvarchar](255) NULL
) ON [PRIMARY]


insert into  [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE] 
select 
distinct
--cast(substring(tc.[Claim Number],3,5) as numeric (10,0)) as [CLAIM_NUMB],
--tc.[Claim Number] as [FULL_CLAIM_NUMB],
tbwp.[BO Policy Number], 
tbwp.[RiskWrite Riskid], 
tbwp.[RiskWrite RiskExtRef], 
--bd.[RENOVACI] as [New/Renew],
'R'															as [New/Renew],
coalesce(bod.[Policy Holder], bd.[COMPANY_NA])				as [BO Insured],
coalesce(clnt.[CLIENTNAME], bod.[Policy Holder], bd.[COMPANY_NA]) as [Insured Name],		
coalesce(rbc.[brokercompanyname], bodv.[broker name])		as [Broker Name], 

--select distinct rbc.officeaddress5, rbc.invoiceaddress5,
--case when rbc.[officeaddress5] in ('ACT','NSW','NT','QLD','SA','TAS','VIC','WA','NZ') then rbc.[officeaddress5]
--	 when rbc.[invoiceaddress5] in ('ACT','NSW','NT','QLD','SA','TAS','VIC','WA','NZ') then rbc.[invoiceaddress5]
--	 when rbc.[invoiceaddress5] in ('Norther Territory','Northern Territory') then 'NT'
--	 when rbc.[invoiceaddress5] in ('South Australia') then 'SA'
--	 when rbc.[invoiceaddress5] in ('Western Australia') then 'WA'
--	 when rbc.[invoiceaddress5] in ('Canberra') then 'ACT'
--	 when rbc.[invoiceaddress5] in ('New South Wales') then 'NSW'
--	 when rbc.[invoiceaddress5] in ('Queensland') then 'QLD'
--	 when rbc.[invoiceaddress5] in ('New Zealand') then 'NZ'
--	 when rbc.[invoiceaddress5] in ('Tasmania') then 'TAS'
--		else 'Unknown'									end as [Broker State],

bodv.[Brok# State]											as [Broker State],	

coalesce(rsk.[coverstart], bodv.[Policy from])				as EffDate,
coalesce(rsk.[coverend], bodv.[Policy to])					as ExpDate,

''															as [Carrier Code],

coalesce(cast(isnull(figures.[WrittenPremium],0) as numeric(18,2)),	bodv.[Gross 100%])					as [WrittenPremium],
coalesce(cast(isnull(figures.[commission],0)	as numeric(18,2)), bodv.[Brok# Comm#])					as [commission],
coalesce(cast(isnull(figures.[commissionpercentage],0) as float)/100, bodv.[CG Comm %])					as [Gross Comm Percent],
coalesce(cast(isnull(figures.[brokerage],0) as numeric(18,2)), bodv.[Brok# Comm#])						as [brokerage],
coalesce(cast(isnull(figures.[brokeragepercentage],0) as float)/100, bodv.[Brokers % excluding cedant])	as [Producer Comm Percent],
coalesce(cast(isnull(figures.[Indemnity Limit],0) as numeric(18,0)), bodv.[Límite Orden])				as [Indemnity Limit],

bprod.[CONTRAID],
ltrim(rtrim(bprod.[PRODUCT]))								as [Line of Business],
''															as [Policy Section],
coalesce(cast(isnull(figures.[Excess],0) as numeric(18,2)), bodv.[Excess])	as [Excess],

case when rsk.[risktype] like '%X%' then 'Excess' else 'Primary' end as [Primary / Excess / Coinsurance],

bod.[CONTRACT]												as [Binder],

bprod.[INSURER1]											as [Insurer1Name],
bprod.[INSURER2]											as [Insurer2Name],
bprod.[INSURER3]											as [Insurer3Name],
bprod.[INSURER4]											as [Insurer4Name],

'AUD'														as [Currency],

isnull(bod.[SCHEME],'')										as [Scheme],
isnull(bod.[Activity Code],'')								as [Activity Code],
case when bod.[UMR] = '' then NULL else bod.[UMR] end 		as [UMR],
bprod.YEARLETTER											as [Year Letter],
bprod.YEARLETTER											as [Year Letter New],

usr.userid													as [Underwriter],
--tc.[riskid]												as [PolicyNumber], 
''															as [BillType],
''															as [CovCode],
rsk.id_usrr_underwriter,
rbr.email													as [Broker Email],
figures.id_risk												as id_risk,
bod.GST														as [GSTPercent],
bod.[PRODUCT]												as [Class],
bd.REF__PAY_T												as [RefPayToDual],
rprod.[Productname]											as [RiskWrite Product]

from ##temp_BO_RW_Pols tbwp
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] bod on tbwp.[BO Policy Number] = bod.[Policy number]
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR] bodv on tbwp.[BO Policy Number] = bodv.[Policy number]
left join [RiskWriteApac].[dbo].[risk] rsk on tbwp.[RiskWrite Riskid] = rsk.riskid
left join [RiskWriteApac].[dbo].[brokercompany] rbc on rsk.id_brkc = rbc.id_brkc
left  join (select ID_BKRC, max(ID_BRKR) as ID_BRKR from [RiskWriteApac].[dbo].[broker] where isnull(EMAIL,'') <> '' group by ID_BKRC) rbrmax on rbc.id_brkc = rbrmax.ID_BKRC
left  join [RiskWriteApac].[dbo].[broker] rbr on rbrmax.ID_BRKR = rbr.ID_BRKR
left join [RiskWriteApac].[dbo].[client] clnt on rsk.id_clnt = clnt.id_clnt
left join [RiskWriteApac].[dbo].[product] rprod on rsk.productid = rprod.PRODUCTID
inner join (select [CONTRAID], max(BINDERENDD) as maxbinddate from [RiskWriteApac].[dbo].[BO_PRODUCT] group by [CONTRAID]) bprodmax on bod.[Year letter]+bod.[CONTRACT] = bprodmax.[CONTRAID] 
inner join [RiskWriteApac].[dbo].[BO_PRODUCT] bprod on bprodmax.CONTRAID = bprod.CONTRAID and bprodmax.maxbinddate = bprod.BINDERENDD
left join [RiskWriteApac].[dbo].[users] usr on rsk.id_usrr_underwriter = usr.id_usrr 
left join  [RiskWriteApac].[dbo].[BO_DUALDATA] bd on tbwp.[BO Policy Number] = bd.[POLICY__]

--Getting Premium, Brokerage, Limit from RiskWrite
left join 
(select 
--top 100
q.id_risk,
sum(isnull(qp.ownpremium,0))							as [WrittenPremium],-- [RW_NB_RN_Booked_Premium],
max(isnull(qp.ownlimit,0))								as [Indemnity Limit], --[RW_NB_RN_Product_Limit],
sum(isnull(qp.[commission],0))							as [commission],
max(isnull(qp.[commissionpercentage],0))				as [commissionpercentage],
sum(isnull(qp.[brokerage],0))							as [brokerage],
max(isnull(qp.[brokeragepercentage],0))					as [brokeragepercentage],
max(isnull(qp.[excess],0))								as [Excess]
from [RiskWriteApac].[dbo].[quotes] q 
left join [RiskWriteApac].[dbo].[quotesection] qs on q.id_quot = qs.ID_QUOT
left join [RiskWriteApac].[dbo].[quotepremium] qp on qs.id_qtsn = qp.id_qtsn

where 1=1
and not(q.quotestatus in ('DECL','NTU','WIP'))
group by 
q.id_risk
) figures on rsk.id_risk = figures.id_risk

/*
select * from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE] where [Policy Number] in (
'BIZ44948116H0 - CY',
'BIZ44948116H0 - ML',
'BIZ44948116H0 - PL',
'BIZ49731316H0 - ML',
'DO-28062215G0 - DO',
'EVO14642515G1 - DO',
'EVO14642515G1 - SL',
'MLW36088315H0 - ML',
'MLW36344115H0 - ML')
order by [Policy Number]

*/ 

-- work claim delete

PRINT ''; PRINT 'Delete duplicate Policyrecords from WORK FILE leaving one record for the Policy instead of dealing with crap legacy claims data'

delete from a
--select b.* 
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE] a
inner join
(SELECT MAX(%%lockres%%) pseudoID, 
       [Policy number]
      ,[riskid]
      ,[New/Renew]
      ,[BO Insured]
      ,[Insured Name]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE]  
GROUP BY 
       [Policy number]
      ,[riskid]
      ,[New/Renew]
      ,[BO Insured]
      ,[Insured Name]
) b ON a.[Policy number] = b.[Policy number]
       and a.[riskid] = b.[riskid]
       and a.[New/Renew] = b.[New/Renew]
       and a.[BO Insured] = b.[BO Insured]
       and a.[Insured Name] = b.[Insured Name]
	   and b.pseudoID <> a.%%lockres%%
where 1=1

/*
select * from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE] where [Policy Number] in (
'BIZ44948116H0 - CY',
'BIZ44948116H0 - ML',
'BIZ44948116H0 - PL',
'BIZ49731316H0 - ML',
'DO-28062215G0 - DO',
'EVO14642515G1 - DO',
'EVO14642515G1 - SL',
'MLW36088315H0 - ML',
'MLW36344115H0 - ML')
order by [Policy Number]

*/ 

--select distinct [Broker Email] from ##temp_3
--select * from ##temp_3 where  [Broker Email] is NULL


PRINT ''; PRINT getdate(); PRINT 'Create table of Policy Shells for Claims to attach to in IMS'

IF OBJECT_ID('[DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL]', 'U') IS NOT NULL
		DROP TABLE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL]
		
CREATE TABLE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL](
	[New/Renew] [nvarchar](255) NULL,
	[PolicyNumber] [nvarchar](255) NULL,
	[RiskWrite RiskExtRef] [nvarchar](255) NULL,
	[RiskWrite RiskId] [nvarchar](255) NULL,
	[Line of Business] [nvarchar](255) NULL,
	[RiskWrite Product] [nvarchar](255) NULL,
	[EffDate] [date] NULL,
	[ExpDate] [date] NULL,
	[Insured Name] [nvarchar](max) NULL,
	[Broker Name] [nvarchar](max) NULL,
	[Broker State] [nvarchar](255) NULL,
	[Carrier Code] [nvarchar](255) NULL,
	[WrittenPremium] [numeric](18, 2) NULL,
	[Gross Comm Percent] [numeric](18, 2) NULL,
	[Producer Comm Percent] [float] NULL,
	[Indemnity Limit] [numeric](18, 0) NULL,
	[Policy Section] [nvarchar](255) NULL,
	[Excess] [numeric](18, 0) NULL,
	[Primary / Excess / Coinsurance] [nvarchar](255) NULL,
	[Binder] [nvarchar](255) NULL,
	[Insurer1Name] [nvarchar](255) NULL,
	[Insurer2Name] [nvarchar](255) NULL,
	[Insurer3Name] [nvarchar](255) NULL,
	[Insurer4Name] [nvarchar](255) NULL,
	[Currency] [nvarchar](255) NULL,
	[Scheme] [nvarchar](255) NULL,
	[Activity Code] [nvarchar](255) NULL,
	[UMR] [nvarchar](255) NULL,
	[Year Letter] [nvarchar](255) NULL,
	[Year Letter New] [nvarchar](255) NULL,
	[Underwriter] [nvarchar](255) NULL,
	[BillType] [nvarchar](255) NULL,
	[CovCode] [nvarchar](255) NULL,
	[Broker Email] [nvarchar](255) NULL,
	[InsuredName_Key] [nvarchar](max) NULL,
	[Select InsuredName] [nvarchar](max) NULL,
	[Original InsuredName] [nvarchar](max) NULL,
	[min InsuredName] [nvarchar](max) NULL,
	[max InsuredName] [nvarchar](max) NULL,
	[firstpart_InsuredName] [nvarchar](max) NULL,
	[dba] [nvarchar](max) NULL,
	[GSTPercent] [numeric](18, 2) NULL,
	[Class] [nvarchar](255) NULL,
	[RefPayToDual] [nvarchar](255) NULL

) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


PRINT ''; PRINT getdate(); PRINT 'Populate table of Policy Shells for Claims to attach to in IMS'

INSERT INTO [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL]
select distinct
[New/Renew],
[Policy number],
[RiskExtRef],
[riskid],
ltrim(rtrim([Line of Business])),
[RiskWrite Product],
[EffDate],
[ExpDate],
[Insured Name],
[Broker Name],
[Broker State],
[Carrier Code],
[WrittenPremium],
[Gross Comm Percent],
[Producer Comm Percent],
[Indemnity Limit],
[Policy Section],
[Excess],
[Primary / Excess / Coinsurance],
[Binder],
[Insurer1Name],
[Insurer2Name],
[Insurer3Name],
[Insurer4Name],
[Currency],
[Scheme],
[Activity Code],
[UMR],
[Year Letter],
[Year Letter New],
[Underwriter],
[BillType],
[CovCode],
[Broker Email],
NULL,
NULL,
[Insured Name],
NULL,
NULL,
NULL,
NULL,
[GSTPercent],
[Class],
[RefPayToDual]

from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_WORK_FILE]


PRINT ''; PRINT 'Delete duplicate Policy records from VAR-G, leaving one record for the Policy'

delete from a
--select * 
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] a
inner join
(SELECT MAX(%%lockres%%) pseudoID, [Policy number], [Firm order date], [Year letter], [Policy from], [Policy to]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION]  
GROUP BY [Policy number], [Firm order date], [Year letter], [Policy from], [Policy to]
) b ON b.[Policy number] = a.[Policy number] 
							AND b.[Firm order date] = a.[Firm order date] 
							AND b.[Year letter] = a.[Year letter] 
							and a.[Policy from] = b.[Policy from]
							and a.[Policy to] = b.[Policy to]
							AND b.pseudoID <> a.%%lockres%%


PRINT ''; PRINT 'Delete duplicate Policy records from VAR, leaving one record for the Policy'

delete from a
--select * 
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR] a
inner join
(SELECT MAX(%%lockres%%) pseudoID, [Policy number], [Firm order date], [Year letter], [Policy from], [Policy to]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR]  
GROUP BY [Policy number], [Firm order date], [Year letter], [Policy from], [Policy to]
) b ON b.[Policy number] = a.[Policy number] 
							AND b.[Firm order date] = a.[Firm order date] 
							AND b.[Year letter] = a.[Year letter] 
							and a.[Policy from] = b.[Policy from]
							and a.[Policy to] = b.[Policy to]
							AND b.pseudoID <> a.%%lockres%%

PRINT ''; PRINT 'Delete duplicate Policy records from POLICY SHELL, leaving one record for the Policy'

delete from a
--select b.* 
--select count(*)
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] a
inner join
(SELECT MAX(%%lockres%%) pseudoID, [Policynumber], [effdate], [expdate], [Year letter], [Insured Name]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL]  
GROUP BY [Policynumber], [effdate], [expdate], [Year letter], [Insured Name]
) b ON b.[Policynumber] = a.[Policynumber] 
							AND b.[EffDate] = a.[EffDate] 
							AND b.[ExpDate] = a.[ExpDate] 
							AND b.[Year letter] = a.[Year letter] 
							AND b.pseudoID <> a.%%lockres%%



PRINT ''; PRINT getdate(); PRINT 'Do some clean up of dodgy looking Insured Names before trying to rationalise names into a common name for insureds with multiple policies';

update ps
	set
--select Insured,
		[Insured Name] = ltrim(rtrim(REPLACE(replace(replace(replace(replace(TRIM([Insured Name]), CHAR(13),', '), CHAR(10), ', '), CHAR(9), ' '),'<BR>',', '),'?',' ')))
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and ([Insured Name] LIKE concat('%', char(13), '%') OR [Insured Name] LIKE concat('%', char(10), '%') OR [Insured Name] LIKE concat('%', char(9), '%') or [Insured Name] LIKE '%<BR>%' or [Insured Name] LIKE '%?%')


PRINT ''; PRINT getdate(); PRINT 'Update temp InsuredName by replacing special characters CR, LF, TAB with commas';--•TIMELOG

UPDATE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] 
	SET [insured Name] = 
		replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(TRIM([insured Name]), 
		CHAR(13),', '), 
		CHAR(10), ', '), 
		CHAR(9), ' ')	
		,' ','<>'),
		'><',''),
		'<>',' ')
		,' ,',',')	
		,', ',',')
		,',','<>'),
		'><',''),
		'<>',',')
		,',',', ')
where 1=1
--and ([insured Name] LIKE concat('%', char(13), '%') OR [insured Name] LIKE concat('%', char(10), '%') OR [insured Name] LIKE concat('%', char(9), '%'))


PRINT ''; PRINT getdate(); PRINT 'Update temp InsuredName by replacing multiple commas and other characters such as colons and semi-colons as the business prefers it'
 

UPDATE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] 
	SET [insured Name] = 
		replace(replace(replace(replace(replace(replace(replace(replace([insured Name],
		', , ,',
		', '),
		', ,',', ')
		,'; ',', ')
		,'and;, b)'
		,'and b)')
		,',, ,'
		,', '),
		';, '
		,', '),
		':-,'
		,': ')
		,':, '
		,', ')  
where 1=1  


PRINT ''; PRINT getdate(); PRINT  'Update temp InsuredName by replacing specific characters strings with comma space as the business requires it';--•TIMELOG

UPDATE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] 
	SET [insured Name] = 
		replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace([insured Name],
		', ',', '), 
		',    ,',', '),
		',                     ',', '),
		',   ,',', '),
		',                           ',', '),
		',              ' ,', '),
		',                                  ',', '),
		',  ',', '),
		'&    ',', '),
		',                ',', '),
		'No Free       ',', '),
		'Lunches Super Fund                ',', '),
		',        ',', '),
		',       ',', '),
		',      ',', '),
		'           and',' and')
where 1=1  


PRINT ''; PRINT getdate(); PRINT 'Update temp InsuredName to remove an end comma'

UPDATE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] 
	SET [insured Name] = LEFT([insured Name],(LEN([Insured Name])-1))
where 1=1
and RIGHT([Insured Name],1) = ','

PRINT ''; PRINT getdate(); PRINT 'Update temp InsuredName - a few finsihing touches up to finish up';--•TIMELOG
--•TIMELOG

UPDATE [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] 
	SET [insured Name] = 
		replace(replace(replace(replace(replace([insured Name],
		', , ',', '), 
		'     ',' '),
		',,',','),
		' , , ',', '),
		', ,',', ')
where 1=1  


PRINT ''; PRINT getdate(); PRINT  'Create temp table of Policies which have potential common Insureds';

if OBJECT_ID('tempdb..##temp_ps') is not null drop table ##temp_ps

select 
--top 100 

[insured Name]							as [InsuredName],
[insured Name]							as [InsuredName_Key],
[insured Name]							as [InsuredName_Key_Substringed],
9										as [Substringed]		

into ##temp_ps

--distinct wr.[status, count(*)
from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1


--•TIMELOG
PRINT ''; PRINT getdate(); PRINT  'Update temp Insured Name Key table for specific values to create standardised values';--•TIMELOG
--•TIMELOG

--This one is creating mayhen with the INSUREDNAME_KEY so overriding it with a specific value because it ends up with one letter 'T'
UPDATE ##temp_ps SET InsuredName_Key = 'TTTooTetsuyasRestaurant' where left(insuredname,22) = 'T Pty Ltd t/as Tetsuya';
--These 3 may create issues with the INSUREDNAME_KEY if other similar name Insureds arrive later, so overriding them with specific values because they become so short - 2 letters'
UPDATE ##temp_ps SET InsuredName_Key = '27SouthernCrosFinance' where insuredname = '27 Pty Ltd T/As Southern Cross Finance';
UPDATE ##temp_ps SET InsuredName_Key = 'IQCompany' where insuredname = 'IQ Pty Ltd';
UPDATE ##temp_ps SET InsuredName_Key = 'LXDesignHouseSolutionsTurnkey' where insuredname = 'LX Corporation Pty Ltd, LX Design House Pty Ltd, LX Solutions Pty Ltd, LX Turnkey Pty Ltd, LX Pty Ltd, LX Innovations Pty Ltd, Blyth Family Holdings Pty Ltd atf Blyth Family Trust';
--Carry on
UPDATE ##temp_ps SET InsuredName_Key = UPPER(InsuredName_Key); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'PROPRIETARY', ' PTY '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'PTY.', ' PTY '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'P/L', ' PTY LTD'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'PTYLTD', ' PTY LTD'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'LIMITED', ' LTD'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' TA ', ' T/A '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'T/AS', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'T''AS', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' TA ', ' T/A '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' TAS ', ' T/A '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'TRADING AS', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'TRADING NAMES :', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'TRADING NAMES', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'TRADING NAME:', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'TRADING NAME', ' T/A'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ',', ' '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '.', ' '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' and ', '&'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '-', ' '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '''', ' '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '"', ' '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'AS TRUSTEE FOR', ' ATF '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'A/T/F', ' ATF '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'AS TRADING FOR', ' ATF '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, 'INCORPORATED', ' INC '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' AUSTRALIA ', ' AUST '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' AUSTRALASIA ', ' AUST '); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '(AUSTRALIA)', '(AUST)'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '(AUSTRALASIA)', '(AUST)'); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '1)', ''); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, '1.', ''); 
UPDATE ##temp_ps SET InsuredName_Key = LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(InsuredName_Key, ' ', '[o][c]'), '[c][o]', ''), '[o][c]', ' '))); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX('PTY LTD', InsuredName_Key + 'PTY LTD', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX('LTD', InsuredName_Key + 'LTD', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX(' INC', InsuredName_Key + ' INC', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX(' ATF', InsuredName_Key + ' ATF', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX(';', InsuredName_Key + ';', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX('AUST PTY', InsuredName_Key + 'AUST PTY', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = LEFT(InsuredName_Key, CHARINDEX('T/A', InsuredName_Key + 'T/A', 3) - 1); 
UPDATE ##temp_ps SET InsuredName_Key = REPLACE(InsuredName_Key, ' ', ''); 


-- A bit of cleaning up for names that almost common but some have extra bits on the end - chopping that off to create coommonality
--Locate substrings --•TIMELOG
PRINT ''; PRINT getdate(); PRINT 'Set [InsuredName_Key_Substringed] = [InsuredName_Key]';--•TIMELOG
--•TIMELOG

UPDATE ##temp_ps SET [InsuredName_Key_Substringed] = [InsuredName_Key]; 

/*
PRINT ''; PRINT getdate(); PRINT 'A bit of cleaning up - update temp table';--•TIMELOG
--•TIMELOG

UPDATE tn1 
SET 
--select 
	[InsuredName_Key_Substringed] = ( 
	    SELECT TOP 1 InsuredName_Key 
	    FROM ##temp_ps AS tn2 
	    WHERE 1=1
		and tn2.InsuredName_Key = LEFT(tn1.InsuredName_Key, len(tn2.InsuredName_Key)) 
	    --and tn2.BrokerId = tn1.BrokerId 
	    and tn2.InsuredName_Key != tn1.InsuredName_Key 
	    ORDER BY LEN(tn2.InsuredName_Key) ASC 
    ) 
  ,Substringed = 1 

FROM ##temp_ps AS tn1 

WHERE ( 
    SELECT TOP 1 InsuredName_Key 
    FROM ##temp_ps AS tn2 
    WHERE 1=1
	and tn2.InsuredName_Key = LEFT(tn1.InsuredName_Key, len(tn2.InsuredName_Key)) 
    --and tn2.BrokerId = tn1.BrokerId 
    and tn2.InsuredName_Key != tn1.InsuredName_Key 
	and (tn2.InsuredName_Key like '%(%)%' or tn2.InsuredName_Key like '%[%]%')  -- This is catering for where there could be additional information in the name which needs to be kept to make the InsuredName_Key unique
																				-- e.g. Gary Peer and Associates Pty Ltd, which has a number of businesses (Carnegie),(Bentleigh),(St Kilda)
    ORDER BY LEN(tn2.InsuredName_Key) ASC 
    ) IS NOT NULL; 



PRINT ''; PRINT getdate(); PRINT 'Put the updated Name Key back over the top of the original Name Key';--•TIMELOG
--•TIMELOG

update ##temp_ps
	set 
--select t1.InsuredName_Key, t1.InsuredName_Key_Substringed, t1.Substringed,
		InsuredName_Key = t1.InsuredName_Key_Substringed
from ##temp_ps t1
where 1=1
and t1.Substringed = 1

*/

--select * from ##temp_ps --where InsuredName_Key <> InsuredName_Key_Substringed
PRINT ''; PRINT getdate(); PRINT 'Set [InsuredName_Key] and [Select InsuredName] in Policy Shell table after rationlisation of Insured Nanes]';--•TIMELOG
--•TIMELOG

update ps
	set 
--select mint.*, t.*, ps.Insured,
		[InsuredName_Key] = mint.[InsuredName_Key],
		[Select InsuredName] = mint.[Select_InsuredName],
		[min InsuredName] = mint.[min_InsuredName],
		[max InsuredName] = mint.[Select_InsuredName]

from
(select 
InsuredName_Key,
max([InsuredName]) as [Select_InsuredName],
min([InsuredName]) as [min_InsuredName]
from ##temp_ps
group by 
InsuredName_Key) mint
inner join ##temp_ps t on mint.InsuredName_Key = t.InsuredName_Key
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps on t.InsuredName = ps.[insured Name]
where 1=1
--and mint.[Select_InsuredName] <> t.[insuredName]


PRINT ''; PRINT getdate(); PRINT 'For Insured Name EXTRAPOLATE TRADING AS INTO A SEPARATE FIELD CALLED DBA (Doing Business As - American)'

PRINT ''; PRINT getdate(); PRINT 'Create temp table-1 for Insured Name and Trading As / dba'

if OBJECT_ID('tempdb..##temp_trading_as_1') is not null drop table ##temp_trading_as_1

select distinct
[InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
MIN(z.[Offset-1]) as [Offset-1], MIN(z.[Offset-2]) as [Offset-2]

into ##temp_trading_as_1
from
(
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' (trading name)',  [Select InsuredName])-1 as [Offset-1],
Charindex(' (trading name)',  [Select InsuredName])+15 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% (trading name)%'
and not([Select InsuredName] like '%(Trading Name)%;%') 
and not([Select InsuredName] like '%(Trading Name)%,%') 

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex('(trading name)',  [Select InsuredName])-1 as [Offset-1],
Charindex('(trading name)',  [Select InsuredName])+15 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '%(trading name)%'
and not([Select InsuredName] like '%(Trading Name)%;%') 
and not([Select InsuredName] like '%(Trading Name)%,%') 

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' trading names :',  [Select InsuredName])-1 as [Offset-1],
Charindex(' trading names :',  [Select InsuredName])+16 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% trading names :%'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex('trading as:',  [Select InsuredName])-1 as [Offset-1],
Charindex('trading as:',  [Select InsuredName])+14 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '%)%trading as:%-%'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex('trading as:',  [Select InsuredName])-1 as [Offset-1],
Charindex('trading as:',  [Select InsuredName])+12 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% trading as: %'
and  not([Select InsuredName] like '%)%trading as:%-%')

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex('trading as -',  [Select InsuredName])-1 as [Offset-1],
Charindex('trading as -',  [Select InsuredName])+13 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '%Trading As - %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' trading name ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' trading name ',  [Select InsuredName])+14 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% trading name %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' trading name:',  [Select InsuredName])-1 as [Offset-1],
Charindex(' trading name:',  [Select InsuredName])+14 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% trading name:%'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' (trading as',  [Select InsuredName])-1 as [Offset-1],
Charindex(' (trading as',  [Select InsuredName])+12 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% (trading as%'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T/AS',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T/AS',  [Select InsuredName])+7 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T/AS  %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T/As',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T/As',  [Select InsuredName])+6 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T/As %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex('T/as ',  [Select InsuredName])-1 as [Offset-1],
Charindex('T/as ',  [Select InsuredName])+5 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '%T/as %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T/A',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T/A',  [Select InsuredName])+5 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T/A %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T/As:',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T/As:',  [Select InsuredName])+7 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T/As: %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T/As',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T/As',  [Select InsuredName])+6 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T/As %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' TAs ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' TAs ',  [Select InsuredName])+5 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% TAs %'

--catrering for Tasmanian Insured's
and not(ps.[Select InsuredName] like '% Tas Pty%' or ps.[Select InsuredName] like '% Tas Inc%' or ps.[Select InsuredName] like '% Tas 7%' 
			or ps.[Select InsuredName] like '% Tas of Inc%' or ps.[Select InsuredName] like '% Tas &%' or ps.[Select InsuredName] like '% Tas Limited%')

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' Trading As',  [Select InsuredName])-1 as [Offset-1],
Charindex(' Trading As',  [Select InsuredName])+11 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% Trading As%'
and not([Select InsuredName] like '%)%trading as:%-%')
and not([Select InsuredName] like '%trading as)%')
and not([Select InsuredName] like '%Trading As - %')
and not([Select InsuredName] like '% trading as: %')

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' T''As',  [Select InsuredName])-1 as [Offset-1],
Charindex(' T''As',  [Select InsuredName])+5 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% T''As %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' TA ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' TA ',  [Select InsuredName])+4 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% TA %'
and not([Select InsuredName] like '% TA &%')

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' t.a ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' t.a ',  [Select InsuredName])+5 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% t.a %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' (t/a) ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' (t/a) ',  [Select InsuredName])+7 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% (t/a) %'

union
SELECT [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
Charindex(' (t/as) ',  [Select InsuredName])-1 as [Offset-1],
Charindex(' (t/as) ',  [Select InsuredName])+8 as [Offset-2]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps
where 1=1
and  [Select InsuredName] like '% (t/as) %'

) z

group by [InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName]
order by [InsuredName_Key],[Line of Business] desc

--select * from ##temp_trading_as_1 where [Offset-1] < 1


PRINT ''; PRINT getdate(); PRINT 'Create temp table-2 for Insured Name Trading As';

if OBJECT_ID('tempdb..##temp_trading_as_2') is not null drop table ##temp_trading_as_2

select 
[InsuredName_Key],[PolicyNumber],[Line of Business], [Select InsuredName],
[Offset-1],
[Offset-2],

case	when [Offset-1] < 1 then  [Select InsuredName]
		when right(LEFT( [Select InsuredName],[Offset-1]),1) = ',' then rtrim(ltrim(LEFT( [Select InsuredName],[Offset-1]-1))) 
			else rtrim(ltrim(LEFT( [Select InsuredName],[Offset-1]))) end as firstpart_InsuredName,

rtrim(ltrim(SUBSTRING( [Select InsuredName],[Offset-2],800))) as dba

into ##temp_trading_as_2

from ##temp_trading_as_1
where 1=1
order by [Offset-1]


--select * from ##temp_trading_as_1 where policynumber = 'MLW25910216H1 - ML'
--select * from ##temp_trading_as_2 where policynumber = 'MLW25910216H1 - ML'



PRINT ''; PRINT getdate(); PRINT 'Update Policy Shell table from temp table-2 for first part insuredname and dba'

update ps
	set
--select t2.*,
		firstpart_InsuredName = t2.firstpart_insuredname,
		dba = t2.dba

from ##temp_trading_as_2 t2
inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps on t2.[PolicyNumber] = ps.[PolicyNumber] 


/*

-- TEST DATA BELOW TEST DATA BELOW

delete [DM_IMS_AU_CLAIMS].[dbo].[Dual_PolicySummary_Staging]

INSERT INTO [DM_IMS_AU_CLAIMS].[dbo].[Dual_PolicySummary_Staging]

SELECT 
distinct
[New/Renew]
	  ,[Insured Name]
      ,[Broker Name]
      ,[Broker State]
      ,[EffDate]
      ,[ExpDate]
      ,[Carrier Code]
      ,[WrittenPremium]
      ,[Gross Comm Percent]
      ,[Producer Comm Percent]
      ,[Indemnity Limit]
      ,[Line of Business]
      ,[Policy Section]
      ,[Excess]
      ,[Primary / Excess / Coinsurance]
      ,[Binder]
      ,[Insurer1Name]
      ,[Insurer2Name]
      ,[Insurer3Name]
      ,[Insurer4Name]
      ,[Currency]
      ,[Scheme]
      ,[Activity Code]
      ,[UMR]
      ,[Year Letter]
      ,[Year Letter New]
      ,[Underwriter]
      ,[PolicyNumber]
      ,[BillType]
      ,[CovCode]
	  ,NULL -- Claims
	  ,[Select InsuredName] -- CardName
	  ,GETDATE() -- ImportDate
      ,[RiskWrite RiskId]
      --,[Broker Email]
      --,[InsuredName_Key]
      --,[Select InsuredName]
      --,[Original InsuredName]
      --,[min InsuredName]
      --,[max InsuredName]
      --,[firstpart_InsuredName]
      --,[dba]
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] a
  inner join 
  (SELECT top 20
      [Policy Number], 
	  [RiskWrite Policy Number],
	  [Date Claim Opened]
  FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_FT_CLAIMS]
  where 1=1
  and Status = 'Open'
  and Type = 'CLAIM'
  and [Total Incurred] > 0
  and Claimant <> ''
  and Product <> 'AH'
  order by [Date Claim Opened] desc) b on a.PolicyNumber = b.[Policy Number] -- a.[RiskWrite RiskId] = b.[RiskWrite Policy Number] --

  union all

select
distinct
[New/Renew]
	  ,[Insured Name]
      ,[Broker Name]
      ,[Broker State]
      ,[EffDate]
      ,[ExpDate]
      ,[Carrier Code]
      ,[WrittenPremium]
      ,[Gross Comm Percent]
      ,[Producer Comm Percent]
      ,[Indemnity Limit]
      ,[Line of Business]
      ,[Policy Section]
      ,[Excess]
      ,[Primary / Excess / Coinsurance]
      ,[Binder]
      ,[Insurer1Name]
      ,[Insurer2Name]
      ,[Insurer3Name]
      ,[Insurer4Name]
      ,[Currency]
      ,[Scheme]
      ,[Activity Code]
      ,[UMR]
      ,[Year Letter]
      ,[Year Letter New]
      ,[Underwriter]
      ,[PolicyNumber]
      ,[BillType]
      ,[CovCode]
	  ,NULL -- Claims
	  ,[Select InsuredName] -- CardName
	  ,GETDATE() -- ImportDate
      ,[RiskWrite RiskId]
      --,[Broker Email]
      --,[InsuredName_Key]
      --,[Select InsuredName]
      --,[Original InsuredName]
      --,[min InsuredName]
      --,[max InsuredName]
      --,[firstpart_InsuredName]
      --,[dba]
--select *
FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] a
  inner join 
  (SELECT distinct top 20 
      [Policy Number], 
	  [RiskWrite Policy Number],
	  [Date Claim Opened]
  FROM [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_FT_CLAIMS]
  where 1=1
  and Status = 'Open'
  and Type = 'CLAIM'
  and [Total Incurred] > 0
  and Claimant <> ''
  and Product = 'AH'
  order by [Date Claim Opened] desc) b on a.PolicyNumber = b.[Policy Number] -- a.[RiskWrite RiskId] = b.[RiskWrite Policy Number] --


*/
-- TEST DATA TEST DATA 

/*

delete [DM_IMS_AU_CLAIMS].[dbo].[Dual_PolicyDetails_Staging]

INSERT INTO [DM_IMS_AU_CLAIMS].[dbo].[Dual_PolicyDetails_Staging]
select 
--top 10
 g.[Firm order date]				as [SalesDate]
,ps.[Select InsuredName]
,g.[Year Letter]
,g.[Policy number1]					as [PartialPolicyNumber]
,g.[Suffix]
,g.[Policy Number]
,g.[Policy from]					as [EffectiveDate]
,g.[Policy from]					as [ExpirationDate]
,g.[Activity Code]
,g.[Límite Orden]					as [Límit]
,g.[Layer]
,g.[Order]							as [OrderNumber]
,g.[Excess]							as [ExcessLimit]
,g.[Currency]
,g.[Contract]
,g.[Assets / Turnover]				as [AssetsTurnover]
,g.[Client key]						as [BrokerKey]
,g.[broker name]					as [BrokerName]
,g.[Brokers % excluding cedant]		as [BrokersPct]
,g.[Brok# State]					as [BrokerState]
,g.[Gross 100%]						as [Premium]
,g.[GST]
,g.[Brok# Comm#]					as [BrokerCommission]
,g.[GST on broker comm]				as [GSTOnBrokerCommission]
,g.[Adm# Fee]						as [AdminFee]
,g.[GST on adm# fee]				as [GSTOnAdminFee]
,g.[Total]
,g.[Adm# Fee]-g.[GST on adm# fee]	as [NetAdminFee]

,v.[AmountDuetoProcessingBroker]	as [TotalDualBrokerage]

,v.[AmountDuetoProcessingBroker]*g.[Insurer1share] as [NetDualBro1]
,v.[AmountDuetoProcessingBroker]*cast(g.[Insurer2share] as float) as [NetDualBro2]
,v.[AmountDuetoProcessingBroker]*cast(g.[Insurer3Share]as float) as [NetDualBro3]

,v.[Wording]
,g.[Status]
,g.[Country Policy]					as [CountryPolicy]
,g.[Reniew / New]					as [PolicyType]
,g.[Type of policy]					as [TypeOfPolicy]
,g.[Insurer1]						as [Insurer1Name]
,g.[Insurer2]						as [Insurer2Name]
,g.[Insurer3]						as [Insurer3Name]
,g.[Insurer1Share]
,cast(g.[Insurer2share] as float)	as [Insurer2share]
,cast(g.[Insurer3Share]as float)	as [Insurer3Share]
,g.[Income tax 3%]					as [IncomeTax3Percent]
,ps.[GSTPercent]
,g.[Office]
,v.[Cluster Group]					as [ClusterGroup]
,g.[UW]

,convert(varchar(10),convert(date,v.[ProposalDate],103),120) as [Proposal Date]

,convert(varchar(10),convert(date,g.[Endorse from],103),120) as [Endorse from]

,v.[Retro Date]						as [Retro Date]
,ps.[Class]
,g.[Facility risk code]				as [FacilityRiskCode]
,g.[Scheme]
,g.[Currency]
,g.[FixedDIUL]						as [FixedCedeCalc]
,g.[Number of Insureds]				as [NumberOfInsureds]
,g.[Year Letter]					as [Year Letter New]
,g.[MasterPolicyFlag]
,NULL								as [IncomeTaxInPercentage]
,g.[Product]
,ps.[Broker Email]					as [EmailAddress]
,NULL								as [WithholdingTaxPremium]
,NULL								as [WithholdingTaxAdmin]
,NULL								as [WHTaxonAdminFee]
,cast(g.[Insurer4Share] as float)	as [Insurer4share]
,g.[Insurer4]						as [Insurer4Name]

,v.[AmountDuetoProcessingBroker]*cast(g.[Insurer4Share] as float) as [NetDualBro4]

,g.[Gross 100%]*g.[Brokers % excluding cedant]		as [BrokergaeOnPremium]
,g.[Adm# Fee]*g.[Brokers % excluding cedant]		as [BrokerageonAdminFee]
,g.[GST]											as [GSTOnPremium]
,g.[CGcommissionLocked]
,g.[Firm order date]				as [Month]
,g.[UMR]
,NULL								as [FSL]
,g.[VAR]							as [VarCalculation]
,cast(g.[Ins1_Cede_%] as float)		as [CedeIns1]
,cast(g.[Ins2_Cede_%] as float)		as [CedeIns2]
,cast(g.[Ins3_Cede_%] as float)		as [CedeIns3]
,g.[PRODUCT]						as [Codigo]
,0									as [DUILPercentage]
,0									as [DUILCommission]
,0									as [CGCommPercentage]
,0									as [CGCommPerItem]
,g.[Days Insured]					as [DaysInsured]
,g.[Data_Source]					as [DataSource]
,NULL								as [CoinsurerShare]
,g.[Adm# Fee]-g.[GST on adm# fee]	as [NetAdminFee1]
,0									as [DiffinAdminFee]
,g.[GST on adm# fee]				as [GSTOnAdminFee1]
,NULL								as [Verno]
,g.[NZ Calc]						as [NZCalculation]
,1									as [CountPolicy]
,cast(g.[BeachCommssionIns1] as float) as [BeachCommIns1]
,cast(g.[BeachCommissionIns2] as float)	as [BeachCommIns2]
,cast(g.[BeachCommissionIns3] as float)	as [BeachCommIns3]
,cast(g.[BeachCommissionIns4] as float)	as [BeachCommIns4]

,NULL								as [Insurer1BE]
,NULL								as [Insurer2BE]
,NULL								as [Insurer3BE]
,NULL								as [Insurer4BE]
,NULL								as [AmountDueToHowden]
,NULL								as [DualBroIns1Percent]
,NULL								as [DualBroIns2Percent]
,NULL								as [DualBroIns3Percent]
,NULL								as [DualBroins4Percent]
,1									as [Orden]
,NULL as [FechaDeCobro]
--,g.[Fecha De Cobro]					as [FechaDeCobro]
,NULL								as [ClosingReceived]
,NULL								as [ContractReview]
,NULL								as [AnyOnePersonLimit]
,NULL								as [Occupation]
,g.[EVO]
,ps.[RefPayToDual]
,g.[Gross 100%]						as [PaidPremiums]
,g.[Writeoff]
,g.[AmtPayableTo]					as [AmountPayableTo]
,GETDATE()							as [ImportDate]
,ps.[RiskWrite RiskId]

--select ps.[Policynumber]
FROM [DM_IMS_AU_CLAIMS].[dbo].[importAUPolicySummary] ips

inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_POLICY_SHELL] ps on ips.PolicyNumber = ps.PolicyNumber
inner join (select [Policy number], max([firm order date]) [firm order date] 
				from [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] 
				where 1=1
				--and isnull(TransType,'Original') = 'Original'
				group by [Policy number]) gmax on ps.PolicyNumber = gmax.[Policy number]

inner join [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR_G_OPTION] g on ps.PolicyNumber = g.[Policy number] and gmax.[firm order date] = g.[Firm order date]

left join  [DM_IMS_AU_CLAIMS].[dbo].[DM_AU_CLM_IMS_BO_POLICY_VAR] v on ps.PolicyNumber = v.[Policy number] and gmax.[firm order date] = v.[Firm order date]

where 1=1
order by ps.[Policynumber]

-- TEST DATA ABOVE TEST DATA ABOVE
*/


PRINT ''; PRINT getdate(); PRINT 'Finished with ##temp_trading_as_1, drop it'
if OBJECT_ID('tempdb..##temp_trading_as_1') is not null drop table ##temp_trading_as_1

PRINT ''; PRINT getdate(); PRINT 'Finished with ##temp_trading_as_2, drop it'
if OBJECT_ID('tempdb..##temp_trading_as_2') is not null drop table ##temp_trading_as_2


PRINT ''; PRINT getdate(); PRINT 'Exiting Stored Procedure [DM_AU_CLM_IMS_ETL_POLICY_SHELL]' 


END