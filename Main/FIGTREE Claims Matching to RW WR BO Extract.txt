use [RiskWriteApac]

--/*

-- ******************************************************************************************************************************
-- * START LINE FOR RUN-1 *** START LINE FOR RUN-1 *** START LINE FOR RUN-1 *** START LINE FOR RUN-1 *** START LINE FOR RUN-1 *** 
-- ******************************************************************************************************************************

use RiskWriteApac
GO

PRINT 'Create GCF020 table from PROD FigTree database'

IF OBJECT_ID('[dbo].[GCF020_DATA]', 'U') IS NOT NULL
                DROP TABLE [dbo].[GCF020_DATA]


select z.* INTO [dbo].[GCF020_DATA] from 
(select * FROM OPENQUERY([FIGDB],
'SELECT 
F_INCIDENT_NUMBER,													-- Claim Number
F_ACCIDENT_DATE,													-- Date of Loss		
case when F_SPARE_DATE_10 is NULL then F_ACCIDENT_DATE else F_SPARE_DATE_10 end as F_SPARE_DATE_10,			-- Claim Notification Date
F_STATUS,															-- Claim Status - C for Current/Active, F for Finalised/Closed
F_SPARE_CHAR_2,														-- Policy Number, link to RiskWrite RISKEXTREF, WebRater Policy No., sometimes to BackOffice Policy No. 
F_SPARE_CHAR_13,													-- Pivotal Policy, link to RiskWrite RISKID, sometimes to Backoffice Policy No. 
F_SPARE_08_CODE,													-- Claim Type - Claim or Circumstance
F_SPARE_DATE_4,														-- Policy Inception Date										
F_SPARE_DATE_2,														-- Policy Expiry Date										
F_SPARE_CHAR_6,														-- Insured Name
F_SPARE_26_CODE,													-- Dual Claim Code
left(F_SPARE_CHAR_7,7) as F_SPARE_CHAR_7,							-- Dual Reference																				 
F_SPARE_06_CODE,													-- Policy Type
F_ORG_CODE,															-- Organisation Code (Country)
F_MODULE_CODE,														-- G2 for Dual Australia -- also known as COB in FigTree itself

case when F_STATUS = ''F'' then F_FINALISATION_DATE
	 when F_STATUS = ''C'' and F_REOPENED_DATE > F_FINALISATION_DATE then NULL 
	 end as F_FINALISATION_DATE,									-- Date Claim Finalised
											 
F_REOPENED_DATE,													-- Date Claim Reopened
F_PAID_LTD,															-- Total Paid to Date
F_ESTIMATE_YOURS,													-- Outstanding Estimate
F_RECOVERED_LTD,													-- Total Recovered to Date
F_PAID_LTD+F_ESTIMATE_YOURS-F_RECOVERED_LTD as F_TOTAL_INCURRED,	-- Total Incurred
F_POLICY,															-- FigTree Policy 
F_SEARCH,															-- Name Search 	
F_REGISTRATION_DATE,												-- Input Date
''MAIN'' as F_CLIENT																		
FROM PUB."GCF020"
where 1=1
and F_MODULE_CODE = ''G2'' 
and F_ORG_CODE like ''AUS%''

-- Some rubbish Claims we dont want
and not(F_INCIDENT_NUMBER in (''2010C0015578'',''2014C0005529'',''2018C0012363''))

')) z


PRINT ''; PRINT 'Backup GCF020 table - delete and insert rows affected'

delete [dbo].[GCF020_DATA_BACKUP]
insert into [dbo].[GCF020_DATA_BACKUP]
select * from [dbo].[GCF020_DATA]

PRINT ''; PRINT 'Set up BEFORE GCF020 table - delete and insert rows affected'

delete [dbo].[GCF020_DATA_BEFORE]
insert into [dbo].[GCF020_DATA_BEFORE]
select * from [dbo].[GCF020_DATA]


-- ******************************************************************************************************************************************
-- * START LINE FOR RUN-2  ***  START LINE FOR RUN-2  ***  START LINE FOR RUN-2  ***  START LINE FOR RUN-2  ***  START LINE FOR RUN-2  ****** 
-- ******************************************************************************************************************************************
-- * RUN-2 IS FOR PUTTING THE UPDATED GCF020_DATA TABLE THROUGH THE MATCHING ANALYSYS PROCESS - THE RESULT SHOULD BE 010's AND 040's ONLY ***
-- *                                                                                                                                        * 
-- *        IF THERE ARE RESULT CODES OTHER THAN 010's AND 040's FROM RUN-2, THOSE CLAIMS WITH THOSE RESULT CODES NEED TO BE ADDRESSED      *
-- ******************************************************************************************************************************************

use RiskWriteApac
GO

PRINT ''; PRINT 'Copy CLAIM_ANALYSIS_EXTRACT table to a BEFORE update table - delete and insert rows affected'

--CLAIM_ANALYSIS_EXTRACT BEFORE
delete [dbo].[CLAIM_ANALYSIS_EXTRACT_BEFORE]
insert into [dbo].[CLAIM_ANALYSIS_EXTRACT_BEFORE]
select * from [dbo].[CLAIM_ANALYSIS_EXTRACT]


-- ************************************************************************
-- Extract Table Field Clean Up - Remove special characters like LF and CR 
-- ************************************************************************

--Put your specialcharacters here
DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'
DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

PRINT '';PRINT 'Extract Table Field Clean Up - Remove special characters like LF and CR'

--/*
PRINT '';PRINT 'Remove specialcharacters'

update CLAIM_ANALYSIS_EXTRACT_BEFORE
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove dodgy characters'

update CLAIM_ANALYSIS_EXTRACT_BEFORE
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove Reserved word characters again'
update CLAIM_ANALYSIS_EXTRACT_BEFORE
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


update [dbo].[GCF020_DATA]
	set [F_SPARE_CHAR_6] = Replace(REPLACE([F_SPARE_CHAR_6], SUBSTRING([F_SPARE_CHAR_6], PATINDEX( @specialchars, [F_SPARE_CHAR_6] ), 1 ),''),'-',' ')


update [dbo].[GCF020_DATA]
	set [F_SPARE_CHAR_6] = REPLACE(REPLACE(REPLACE([F_SPARE_CHAR_6], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


PRINT '';PRINT 'Drop Claim Extract Table'

if OBJECT_ID('[dbo].[CLAIM_ANALYSIS_EXTRACT]') is not null drop table [dbo].[CLAIM_ANALYSIS_EXTRACT]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

PRINT '';PRINT 'Create Claim Extract Table'

CREATE TABLE [dbo].[CLAIM_ANALYSIS_EXTRACT](
	[FIGTREE_Data] [nvarchar](12) NULL,
	[FIGTREE_Arrow] [nvarchar](4) NULL,
	[F_INCIDENT_NUMBER] [nvarchar](30) NULL,
	[F_SC2_Policy_No] [nvarchar](30) NULL,
	[F_SC13_Pivotal_Pol_RW_RISKID] [nvarchar](30) NULL,
	[F_SC6_Insured_Name] [varchar](max) NULL,
	[F_ACCIDENT_DATE] [date] NULL,
	[F_Notification_Date] [date] NULL,
	[F_Claim_Status] [char](1) NULL,
	[F_Claim_Type] [char](10) NULL,
	[F_SD4_Inception_Date] [date] NULL,
	[F_SD2_Expiry_Date] [date] NULL,
	[F_S26C_Dual_Claim_Code] [nvarchar](20) NULL,
	[F_SC7_Dual_Reference] [nvarchar](20) NULL,
	[F_S6C_Policy_Type] [nvarchar](50) NULL,
	[F_FINALISATION_DATE] [date] NULL,
	[F_REOPENED_DATE] [date] NULL,
	[F_PAID_LTD] [numeric] (10,2) NULL,				
	[F_ESTIMATE_YOURS] [numeric] (10,2) NULL,		
	[F_RECOVERED_LTD] [numeric] (10,2) NULL,		
	[F_TOTAL_INCURRED] [numeric] (10,2) NULL,		
	[F_POLICY] [varchar](255) NULL,
	[F_SEARCH] [varchar](165) NULL,
	[F_REGISTRATION_DATE] [date] NULL,
	[RISKWRITE_Data] [char](20) NULL,
	[RISKWRITE_Arrow] [char](5) NULL,
	[rw_riskextref] [nvarchar](24) NULL,
	[rw_riskid] [nvarchar](14) NULL,
	[rw_multi_risk_for_riskextref] [char] (3) NULL,
	[rw_risk_status] [nvarchar](5) NULL,
	[rw_insured_name] [varchar](max) NULL,
	[rw_inception_date] [datetime] NULL,
	[rw_expiry_date] [datetime] NULL,
	[rw_policy_status] [nvarchar](1) NULL,
	[rw_risk_type] [nvarchar](5) NULL,
	[rw_product_id] [nvarchar](20) NULL,
	[rw_line_of_business] [nvarchar](5) NULL,
	[riskwrite_match_rating] [int] NULL, 
	[riskwrite_match_type] [varchar](50) NULL,
	[rw_riskextref_match] [char] (3) NULL,
	[rw_riskid_match] [char] (3) NULL,
	[rw_insured_name_match] [char] (3) NULL,
	[rw_accident_date_match] [char] (3) NULL,
	[rw_policy_period_match] [char] (3) NULL,
	[rw_result_code_1] [nvarchar](3) NULL,
	[rw_result_1] [varchar](max) NULL,
	[rw_result_code_2] [nvarchar](3) NULL,
	[rw_result_2] [varchar](max) NULL,
	[rw_result_code_3] [nvarchar](3) NULL,
	[rw_result_3] [varchar](max) NULL,
	[rw_result_code_4] [nvarchar](3) NULL,
	[rw_result_4] [varchar](max) NULL,
	[rw_result_code_5] [nvarchar](3) NULL,
	[rw_result_5] [varchar](max) NULL,
	[rw_result_code_6] [nvarchar](3) NULL,
	[rw_result_6] [varchar](max) NULL,
	[rw_result_code_7] [nvarchar](3) NULL,
	[rw_result_7] [varchar](max) NULL,
	[rw_result_code_8] [nvarchar](3) NULL,
	[rw_result_8] [varchar](max) NULL,
	[rw_result_code_9] [nvarchar](3) NULL,
	[rw_result_9] [varchar](max) NULL,
	[rw_result_code_10] [nvarchar](3) NULL,
	[rw_result_10] [varchar](max) NULL,
	[WEBRATER_Data] [char](20) NULL,
	[WEBRATER_Arrow] [char](5) NULL,
	[wr_policyno] [nvarchar](32) NULL,
	[wr_status] [nvarchar](9) NULL,
	[wr_insuredname] [varchar](8000) NULL,
	[wr_inceptiondate] [datetime] NULL,
	[wr_expirydate] [datetime] NULL,
	[wr_previouspolicy_inceptiondate] [datetime] NULL,
	[wr_previouspolicy_expirydate] [datetime] NULL,
	[wr_product] [nvarchar](2) NULL,
	[wr_match_rating] [int] NULL, 
	[wr_match_type] [varchar](50) NULL,
	[wr_policyno_match] [char] (3) NULL,
	[wr_insured_name_match] [char] (3) NULL,
	[wr_accident_date_match] [char] (3) NULL,
	[wr_policy_period_match] [char] (3) NULL,
	[wr_result_code_1] [nvarchar](3) NULL,
	[wr_result_1] [varchar](max) NULL,
	[wr_result_code_2] [nvarchar](3) NULL,
	[wr_result_2] [varchar](max) NULL,
	[wr_result_code_3] [nvarchar](3) NULL,
	[wr_result_3] [varchar](max) NULL,
	[wr_result_code_4] [nvarchar](3) NULL,
	[wr_result_4] [varchar](max) NULL,
	[wr_result_code_5] [nvarchar](3) NULL,
	[wr_result_5] [varchar](max) NULL,
	[BACKOFFICE_Data] [char](20) NULL,
	[BACKOFFICE_Arrow] [char](5) NULL,
	[bo_policy] [nvarchar](50) NULL,
	[bo_EVO] [nvarchar](50) NULL,
	[bo_status] [nvarchar](20) NULL,
	[bo_company_na] [varchar](250) NULL,
	[bo_policy_fro] [datetime] NULL,
	[bo_policy_to] [datetime] NULL,
	[bo_contract] [nvarchar](100) NULL,
	[bo_match_rating] [int] NULL, 
	[bo_match_type] [varchar](50) NULL,
	[bo_policyno_match] [char] (3) NULL,
	[bo_insured_name_match] [char] (3) NULL,
	[bo_accident_date_match] [char] (3) NULL,
	[bo_policy_period_match] [char] (3) NULL,
	[bo_result_code_1] [nvarchar](3) NULL,
	[bo_result_1] [varchar](max) NULL,
	[bo_result_code_2] [nvarchar](3) NULL,
	[bo_result_2] [varchar](max) NULL,
	[bo_result_code_3] [nvarchar](3) NULL,
	[bo_result_3] [varchar](max) NULL,
	[bo_result_code_4] [nvarchar](3) NULL,
	[bo_result_4] [varchar](max) NULL,
	[bo_result_code_5] [nvarchar](3) NULL,
	[bo_result_5] [varchar](max) NULL,
	[overall_match_rating] [int] NULL,
	[overall_recommendation] [nvarchar](max) NULL,
	[policy_no_matched_with_masking] [char] (3) NULL,
	[rw_matching_result_with_policy_no_masking] [varchar](max) NULL,
	[wr_matching_result_with_policy_no_masking] [varchar](max) NULL,
	[bo_matching_result_with_policy_no_masking] [varchar](max) NULL,
	[riskid_matched_to_RISKWRITE_with_masking] [char] (3) NULL,
	[rw_matching_result_with_riskid_masking] [varchar](max) NULL,
	[policy_no_matched_to_BO_EVO_Policy_No] [char] (3) NULL,
	[BO_policy_no_after_match_on_EVO_policy_no] [nvarchar](50) NULL,
	[policy_no_matched_to_BO_EVO_Policy_No_with_masking] [char] (3) NULL,
	[BO_policy_no_after_match_on_EVO_policy_no_with_masking] [nvarchar](50) NULL,
	[riskid_matched_to_BO_EVO_Policy_No] [char] (3) NULL,
	[BO_policy_no_after_match_on_EVO_policy_no_with_riskid] [nvarchar](50) NULL,
	[riskid_matched_to_BO_EVO_Policy_No_with_masking] [char] (3) NULL,
	[BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking] [nvarchar](50) NULL,
	[IsDeleted] [nvarchar](2) NULL
) ON [PRIMARY]

PRINT '';PRINT 'RiskWrite First Pass'

--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and F_SPARE_CHAR_13 to RISKID - Risk Reference in RISKWRITE UI

insert into [dbo].[CLAIM_ANALYSIS_EXTRACT]
--010
select 
distinct
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as FIGTREE_Arrow,
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100) 
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as RISKWRITE_Arrow,
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_risk_status,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
7										as riskwrite_match_rating,
'Full Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'Yes'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'010'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef and FIGTREE Pivotal Policy with RISKWRITE RiskID' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0	                                    as wr_match_rating, 
'No Match'                              as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted

from GCF020_DATA fc 
inner join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref and ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
inner join  [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '') 
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '')
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

--select F_INCIDENT_NUMBER, count(*) from Claim_Analysis_Extract group by F_INCIDENT_NUMBER having count(*) > 1

union all
--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and RW RISKID) is not entered
--020
select 
distinct 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)	
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
r2.riskid								as rw_riskid,
'No '								as [rw_multi_risk_for_riskextref],
r2.riskstatus							as rw_riskstatus,	
left(cl.clientname,100)					as rw_insured_name,
r2.coverstart							as rw_inception_date,
r2.coverend								as rw_expiry_date,
r2.policystatus							as rw_policy_status,
r2.risktype								as rw_risk_type,
r2.productid							as rw_product_id,
r2.lineofbusiness						as rw_line_of_business,		
6										as riskwrite_match_rating,	
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'020'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef which has 1 valid risk but FIGTREE Pivotal Policy (for link to RW_RISKID) is BLANK' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
--select r1.risk_count
from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref  
inner join  [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref
inner join  [RiskWriteApac]..client cl on r2.id_clnt = cl.id_clnt
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = ''
and r1.risk_count = 1
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r2.riskstatus in ('NTU','WIP','QUOT'))

union all
--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and RW RISKID) is entered but no match on RISKWRITE RISKID
--030
select 
distinct 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)	
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
r2.riskid								as rw_riskid,
'No '								as [rw_multi_risk_for_riskextref],
r2.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r2.coverstart							as rw_inception_date,
r2.coverend								as rw_expiry_date,
r2.policystatus							as rw_policy_status,
r2.risktype								as rw_risk_type,
r2.productid							as rw_product_id,
r2.lineofbusiness						as rw_line_of_business,	
6										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'030'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef which has 1 valid risk but FIGTREE Pivotal Policy is entered but has no match with RISKWRITE RiskID' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted

from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref 
inner join  [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref
inner join  [RiskWriteApac]..client cl on r2.id_clnt = cl.id_clnt
left  join  [RiskWriteApac]..risk r3 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r3.riskid
where 1=1
and not(fc.F_SPARE_CHAR_13 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 039 caters for Pivotal Policy with special characters
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '') 
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '')
and r1.risk_count = 1
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r2.riskstatus in ('NTU','WIP','QUOT'))
--No match on F_SPARE_CHAR_13 to RISKWRITE RISKID
and r3.riskid is NULL

union all
--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF 
-- and RW RISKID) is not entered -  RiskWrite has multiple risk risks for the RISKEXTREF, get first one match Incept Year to Policy No. Year
--031
select 
distinct
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as FIGTREE_Arrow,
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100) 
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as RISKWRITE_Arrow,
ltrim(isnull(r2.riskextref,''))			as rw_riskextref,
ltrim(isnull(r2.riskid,''))				as rw_riskid,
--''								as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r2.riskstatus							as rw_risk_status,
left(cl.clientname,100)					as rw_insured_name,
r2.coverstart							as rw_inception_date,
r2.coverend								as rw_expiry_date,
r2.policystatus							as rw_policy_status,
r2.risktype								as rw_risk_type,
r2.productid							as rw_product_id,
r2.lineofbusiness						as rw_line_of_business,	
7										as riskwrite_match_rating,
'Full Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'031'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef, FIGTREE Pivotal Policy blank, taking first RISKWRITE RiskID for Incept Year' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0	                                    as wr_match_rating, 
'No Match'                              as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted

from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, min(id_risk) as id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) rmin on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = rmin.riskextref

inner join risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref and rmin.id_risk = r2.id_risk

inner join  [RiskWriteApac]..client cl on r2.id_clnt = cl.id_clnt

where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = ''
and r1.risk_count > 1
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r2.riskstatus in ('NTU','WIP','QUOT'))
and not(ltrim(rtrim(fc.F_SPARE_CHAR_2)) like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 

and (substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2) between '01' and '99'
				or substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2) between '01' and '99')

and (substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),13,1) = '/' or substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,1) = '/')
and not(substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,3) is NULL) 
and substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,3) like '%[^A-Z]%'

and ('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2) = cast(year(r2.coverstart) as varchar(4))
				or '20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2) = cast(year(r2.coverstart) as varchar(4)))

union all
--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF 
-- and RW RISKID) is not entered -  RiskWrite has multiple risk risks for the RISKEXTREF 
--033
select 
distinct 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
--33
--rmin.Year_Start,
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
''									as rw_riskid,
'Yes '								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,	
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,		
1										as riskwrite_match_rating,	
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'033'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef and FIGTREE Pivotal Policy (for link to RiskWrite RISKID) is BLANK and there are multiple valid risks for the RISKEXTREF and cannot match to any'			
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
--33
from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref

--left join (select riskextref, year(coverstart) as Year_Start, min(id_risk) as id_risk 
--			from risk
--			where 1=1
--			and not(riskstatus in ('NTU','WIP','QUOT'))
--			group by riskextref, year(coverstart)) rmin 
--						on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = rmin.riskextref
--						and not('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2) = cast(rmin.Year_Start as varchar(4))
--									or '20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2) = cast(rmin.Year_Start as varchar(4)))															
--left join risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref and rmin.id_risk = r2.id_risk

where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = ''
and r1.risk_count > 1

and not(ltrim(rtrim(fc.F_SPARE_CHAR_2)) like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 

and (substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,2) between '01' and '99'
				or substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2) between '01' and '99'
				or substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2) between '01' and '99')

--and (substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),13,1) = '/' or substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,1) = '/')
and not(substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,3) is NULL) 
--and substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,3) like '%[^A-Z]%'
--Can't find a Risk with a matching Inception Date Year
--and not('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2) = cast(year(rmin.Year_Start) as varchar(4))
--				or '20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2) = cast(year(rmin.Year_Start) as varchar(4)))
--and rmin.riskextref is NULL

and ('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),10,2)) not in
	(select cast(year(coverstart) as varchar(4)) from risk where riskextref = ltrim(rtrim(fc.F_SPARE_CHAR_2)))

and ('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),14,2)) not in
	(select cast(year(coverstart) as varchar(4)) from risk where riskextref = ltrim(rtrim(fc.F_SPARE_CHAR_2)))

and ('20'+substring(ltrim(rtrim(fc.F_SPARE_CHAR_2)),15,2)) not in
	(select cast(year(coverstart) as varchar(4)) from risk where riskextref = ltrim(rtrim(fc.F_SPARE_CHAR_2)))

union all
--Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF 
-- and F_SPARE_CHAR_13 is entered but no match on RW_RISKID.  - RiskWrite has multiple risk risks for the RISKEXTREF 
--036
select 
distinct 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
''									as rw_riskid,
'Yes'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,		
1										as riskwrite_match_rating,	
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'036'								as rw_Result_Code_1,
'Successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef and FIGTREE Pivotal Policy (for link to RW_RISKID) is entered but has no match to RW_RISKID and there are multiple valid risks for the RW_RISKEXTREF' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref 
inner join  [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref
left  join  [RiskWriteApac]..risk r3 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r3.riskid
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '') 
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '')
and not(fc.F_SPARE_CHAR_13 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 039 caters for Pivotal Policy with special characters
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r2.riskstatus in ('NTU','WIP','QUOT'))
--No match on F_SPARE_CHAR_13 to RISKWRITE RISKID
--and (r3.riskid is NULL)
and (r3.riskid is NULL or isnull(r2.riskextref,'') <> isnull(r3.riskextref,''))
and r1.risk_count > 1

union all
-- Check FigTree Policy No. and Pivotal Policy fields for corruption 
--037
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
''									as rw_riskextref,
''									as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'037'								as rw_Result_Code_1,
'FIGTREE Policy No. and Pivotal Policy are both corrupted and Claim cannot link to any Policy record (RW, WR, BO) - re-enter both in FigTree' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
where 1=1
and isnull(fc.F_SPARE_CHAR_2,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
and isnull(fc.F_SPARE_CHAR_13,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

union all
-- Check FigTree Policy No. field for corruption 
--038
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
''									as rw_riskextref,
''									as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'038'								as rw_Result_Code_1,
'FIGTREE Policy No. is corrupted and Claim cannot link to any Policy record (RW, WR, BO) - re-enter Policy No. in FigTree' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
where 1=1
and isnull(fc.F_SPARE_CHAR_2,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
and not(isnull(fc.F_SPARE_CHAR_13,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%')
-- A claim with PIZA HUT as the Policy No. - Ignore for this check
and not(isnull(fc.F_SPARE_CHAR_2,'') like 'PIZZA HUT%')

union all
-- Check FigTree Pivotal Policy field for corruption 
--038
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
''									as rw_riskextref,
''									as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'039'								as rw_Result_Code_1,
'FIGTREE Pivotal Policy is corrupted and Claim cannot link to any Policy record (RW, WR, BO) - re-enter Pivotal Policy in FigTree' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
where 1=1
and isnull(fc.F_SPARE_CHAR_13,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
and not(isnull(fc.F_SPARE_CHAR_2,'') like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%')

union all
--No Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and RW RISKID) match on RISKWRITE RISKID
--040
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
7										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'No'								as rw_riskextref_match,
'Yes'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'040'								as rw_Result_Code_1,
'Successful match on FIGTREE Pivotal Policy with RISKWRITE RiskID but No Match on FIGTREE Policy Number with RISKWRITE RiskExtRef' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
inner join  [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
left  join  [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '') 
and not(fc.F_SPARE_CHAR_2 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 037, 038 caters for Policy No with special characters
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r1.riskstatus in ('NTU','WIP','QUOT'))
--No match on F_SPARE_CHAR_13 to RISKWRITE RISKID
and r2.riskextref is NULL

union all
--No Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and F_SPARE_CHAR_13 is blank
--050
select 
distinct
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
''									as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'050'								as rw_Result_Code_1,
'No Match on FIGTREE Policy Number with RISKWRITE RiskExtRef and FIGTREE Pivotal Policy (for link to RW_RISKID) is blank' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
--select r1.riskextref
from GCF020_DATA fc 
left  join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref
-- where  r1.riskextref is NULL
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = ''
and not(fc.F_SPARE_CHAR_2 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 037, 038 caters for Policy No with special characters
--No match on F_SPARE_CHAR_2 to RISKWRITE RISKEXTREF
and r1.riskextref is NULL

union all
--No Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and RW RISKID) is entered but No Match on RISKWRITE RISKID
--060
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r2.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r2.riskstatus							as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'060'								as rw_Result_Code_1,
'No Match on FIGTREE Policy Number with RISKWRITE RiskExtRef and No Match for FIGTREE Pivotal Policy (for link to RW_RISKID) with RISKWRITE RiskID' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
from GCF020_DATA fc 
left  join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref
left  join  [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r2.riskid
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '')
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '') 
and not(fc.F_SPARE_CHAR_2 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 037, 038 caters for Policy No with special characters
and not(fc.F_SPARE_CHAR_13 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 039 caters for Pivotal Policy with special characters
--No match on F_SPARE_CHAR_2 to RISKWRITE RISKEXTREF
and r1.riskextref is NULL
--No match on F_SPARE_CHAR_13 to RISKWRITE RISKID
and r2.riskid is NULL

union all
--No Match FIGTREE Claim Master table to RISKWRITE Risk table using F_SPARE_CHAR_2 to RISKEXTREF (External Risk Reference) - Risk Description and Broker Ref in RISKWRITE UI
-- and RW RISKID) is entered but No Match on RISKWRITE RISKID
--070
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
''									as rw_riskextref,
''									as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
''									as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'070'								as rw_Result_Code_1,
'FIGTREE Policy No. (for link to RW_RISKEXTREF) is blank and FIGTREE Pivotal Policy (for link to RW_RISKID) is blank' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
where 1=1
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = ''
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '' 

union all
--FIGTREE Claim Master table RW RISKEXTREF) blank and RW RISKID is entered and Match to RISKWRITE RISKID
--080
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
7										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'No'								as rw_riskextref_match,
'Yes'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'080'								as rw_Result_Code_1,
'FIGTREE Policy Number (for link to RW_RISKEXTREF) is blank and successful match with FIGTREE Pivotal Policy with RISKWRITE RiskID' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
inner join  [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
where 1=1
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = ''
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '') 
--Ignore RISKWRITE policies that have a Risk Status of NTU - Not Taken Up or WIP - Work In Progress or QUOT - Quote
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

union all
--FIGTREE Claim Master table RW RISKEXTREF) blank and RW RISKID) is entered but No Match on RISKWRITE RISKID
--090
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
''									as rw_insured_name,
''									as rw_inception_date,
''									as rw_expiry_date,
''									as rw_policy_status,
''									as rw_risk_type,
''									as rw_product_id,
''									as rw_line_of_business,	
0										as riskwrite_match_rating,
'No Match'							as riskwrite_match_type,
'No'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'090'								as rw_Result_Code_1,
'FIGTREE Policy Number (for link to RW_RISKEXTREF) is blank and FIGTREE Pivotal Policy is entered but has No Match on RISKWRITE RiskID' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
left  join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
where 1=1
and ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = ''
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '') 
and not(fc.F_SPARE_CHAR_13 like  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') -- 039 caters for Pivotal Policy with special characters
--No match on F_SPARE_CHAR_13 to RISKWRITE RISKID
and r1.riskid is NULL

union all
-- Claim record has 2 keys RISKEXTREF and RISKID populated but they do not point to the same RiskWrite Risk
--100, 101
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'No '								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
8										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'100'								as rw_Result_Code_1,
'FIGTREE Policy No. (for link to RW_RISKEXTREF) and FIGTREE Pivotal Policy (for link to RW_RISID) are both entered but the 2 keys point to different RISKWRITE Risk records' 
										as rw_Result_1,
'101'								as rw_Result_Code_2,
'This Risk record has been retrieved using the FIGTREE Policy Number to match the RISKWRITE RiskExtRef where there is only 1 Risk for the RISKEXTREF' 
										as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			group by riskextref) r on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r.riskextref  
inner join [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r1.riskextref
inner join [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
inner join [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r2.riskid 
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '') 
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '')
--and not(fc.F_SPARE_CHAR_2 = fc.F_SPARE_CHAR_13)
and r.risk_count = 1
and (r1.riskid <> ltrim(rtrim(fc.F_SPARE_CHAR_13)))
--and not(r1.riskstatus in ('NTU','WIP','QUOT'))
--and not(r2.riskstatus in ('NTU','WIP','QUOT'))

/*
union all
-- Claim record has 2 keys RISKEXTREF and RISKID populated but they do not point to the same RiskWrite Risk
--110, 111
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
8										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'110'								as rw_Result_Code_1,
'FIGTREE Policy No. (for link to RW_RISKEXTREF) and FIGTREE Pivotal Policy (for link to RW_RISID) are both entered but the 2 keys point to different RISKWRITE Risk records' 
										as rw_Result_1,
'111'								as rw_Result_Code_2,
'This Risk record has been retrieved using the FIGTREE Pivotal Policy to match the RISKWRITE RiskID' 
										as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
inner join [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
inner join [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref  
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r3 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r3.riskextref
where 1=1
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_2,''))) = '') 
and not(ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '')
and not(ltrim(rtrim(fc.F_SPARE_CHAR_2)) = ltrim(rtrim(fc.F_SPARE_CHAR_13)))
and r1.riskextref <> ltrim(rtrim(fc.F_SPARE_CHAR_2))
and not(r1.riskstatus in ('NTU','WIP','QUOT'))
and not(r2.riskstatus in ('NTU','WIP','QUOT'))
and r3.No_of_Risks = 1

*/

union all
--Match found in RISKWRITE but Claim is attached to RISKWRITE Policy which has Risk Status of 'Not Taken Up', Work In Progress or Quote
--140
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r1.riskextref,''))			as rw_riskextref,
ltrim(isnull(r1.riskid,''))				as rw_riskid,
'N/A'								as [rw_multi_risk_for_riskextref],
r1.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r1.coverstart							as rw_inception_date,
r1.coverend								as rw_expiry_date,
r1.policystatus							as rw_policy_status,
r1.risktype								as rw_risk_type,
r1.productid							as rw_product_id,
r1.lineofbusiness						as rw_line_of_business,	
2										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'Yes'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'140'								as rw_Result_Code_1,
'successful match on FIGTREE Pivotal Policy with RISKWRITE RiskID but the Risk has a Status of Not Taken Up or Work In Progress or Quote' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join  [RiskWriteApac]..risk r1 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r1.riskid
inner join  [RiskWriteApac]..client cl on r1.id_clnt = cl.id_clnt
where 1=1
--Report on Claims attached to unbound RISKWRITE policies
and r1.riskstatus in ('NTU','WIP','QUOT')

union all
--Match found in RISKWRITE on RISKEXTREF where there is only 1 risk for the RISKEXTREF but the Risk has a Status of Not Taken Up, Work in Progress or Quote
--150
select 
--top 10
'FIGTREE Data'						as FIGTREE_Data,
'==>>'								as [==>>],
fc.F_INCIDENT_NUMBER, 
ltrim(isnull(fc.F_SPARE_CHAR_2,''))		as F_SC2_Policy_No, 
ltrim(isnull(fc.F_SPARE_CHAR_13,''))	as F_SC13_Pivotal_Pol_RW_RISKID, 
left(ltrim(isnull(fc.F_SPARE_CHAR_6,'')),100)
										as F_SC6_Insured_Name, 
fc.F_ACCIDENT_DATE,
fc.F_SPARE_DATE_10						as F_Notification_Date,
fc.F_STATUS								as F_Claim_Status, 
fc.F_SPARE_08_CODE as F_Claim_Type,
fc.F_SPARE_DATE_4						as F_SD4_Inception_Date, 
fc.F_SPARE_DATE_2						as F_SD2_Expiry_Date, 
fc.F_SPARE_26_CODE						as F_S26C_Dual_Claim_Code,
fc.F_SPARE_CHAR_7						as F_SC7_Dual_Reference,
fc.F_SPARE_06_CODE						as F_S6C_Policy_Type,
fc.F_FINALISATION_DATE,
fc.F_REOPENED_DATE,
fc.F_PAID_LTD,
fc.F_ESTIMATE_YOURS,
fc.F_RECOVERED_LTD,
fc.F_TOTAL_INCURRED,
fc.F_POLICY,
fc.F_SEARCH,
fc.F_REGISTRATION_DATE,
'RISKWRITE Data'					as RISKWRITE_Data,
'==>>>'								as [==>>>],
ltrim(isnull(r2.riskextref,''))			as rw_riskextref,
ltrim(isnull(r2.riskid,''))				as rw_riskid,
'No '								as [rw_multi_risk_for_riskextref],
r2.riskstatus							as rw_riskstatus,
left(cl.clientname,100)					as rw_insured_name,
r2.coverstart							as rw_inception_date,
r2.coverend								as rw_expiry_date,
r2.policystatus							as rw_policy_status,
r2.risktype								as rw_risk_type,
r2.productid							as rw_product_id,
r2.lineofbusiness						as rw_line_of_business,	
2										as riskwrite_match_rating,
'Partial Match'						as riskwrite_match_type,
'Yes'								as rw_riskextref_match,
'No'								as rw_riskid_match,
'No'								as rw_insured_name_match,
'No'								as rw_accident_date_match,
'No'								as rw_policy_period_match,
'150'								as rw_Result_Code_1,
'successful match on FIGTREE Policy No. with RISKWRITE RiskExtRef for a single Risk but the Risk has a Status of Not Taken Up or Work In Progress or Quote' 
										as rw_Result_1,
''									as rw_Result_Code_2,
''									as rw_Result_2,
''									as rw_Result_Code_3,
''									as rw_Result_3,
''									as rw_Result_Code_4,
''									as rw_Result_4,
''									as rw_Result_Code_5,
''									as rw_Result_5,
''									as rw_result_code_6,
''									as rw_result_6,
''									as rw_result_code_7,
''									as rw_result_7,
''									as rw_result_code_8,
''									as rw_result_8,
''									as rw_result_code_9,
''									as rw_result_9,
''									as rw_result_code_10,
''									as rw_result_10,
'WEBRATER Data'                         as WEBRATER_Data,
'==>>'                                  as WEBRATER_Arrow,
''                                      as wr_policyno,
''                                      as wr_status,
''                                      as wr_insuredname,
''                                      as wr_inceptiondate,
''                                      as wr_expirydate,
''									as wr_previouspolicy_inceptiondate,
''									as wr_previouspolicy_expirydate,
''                                      as wr_product,
0                                       as wr_match_rating, 
'No Match'							as wr_match_type,
'No'                                    as wr_policyno_match,
'No'                                    as wr_insured_name_match,
'No'                                    as wr_accident_date_match,
'No'                                    as wr_policy_period_match,
''                                      as wr_result_code_1,
''                                      as wr_result_1,
''                                      as wr_result_code_2,
''                                      as wr_result_2,
''                                      as wr_result_code_3,
''                                      as wr_result_3,
''                                      as wr_result_code_4,
''                                      as wr_result_4,
''                                      as wr_result_code_5,
''                                      as wr_result_5,
'BACKOFFICE Data'                       as BACKOFFICE_Data,
'==>>'		                        as BACKOFFICE_Arrow,
''	                                as bo_policy,  
''									as bo_EVO,
''                                      as bo_status,
''                                      as bo_company_na,
''                                      as bo_policy_fro,
''                                      as bo_policy_to,
''                                      as bo_contract,
0                                       as bo_match_rating, 
'No Match'                              as bo_match_type,
'No'                                    as bo_policyno_match,
'No'                                    as bo_insured_name_match,
'No'                                    as bo_accident_date_match,
'No'                                    as bo_policy_period_match,
''                                      as bo_result_code_1,
''                                      as bo_result_1,
''                                      as bo_result_code_2,
''                                      as bo_result_2,
''                                      as bo_result_code_3,
''                                      as bo_result_3,
''                                      as bo_result_code_4,
''                                      as bo_result_4,
''                                      as bo_result_code_5,
''                                      as bo_result_5,
0										as overall_match_rating,
''									as overall_recommendation,
''									as policy_no_matched_with_masking,
''									as rw_matching_result_with_policy_no_masking,
''									as wr_matching_result_with_policy_no_masking,
''									as bo_matching_result_with_policy_no_masking,
''									as riskid_matched_to_RISKWRITE_with_masking,
''									as rw_matching_result_with_riskid_masking,
''									as policy_no_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no,
''									as policy_no_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_masking,
''									as riskid_matched_to_BO_EVO_Policy_No,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid,
''									as riskid_matched_to_BO_EVO_Policy_No_with_masking,
''									as BO_policy_no_after_match_on_EVO_policy_no_with_riskid_with_masking,
0										as is_deleted
 
from GCF020_DATA fc 
inner join (select riskextref, count(*) as risk_count
			from [RiskWriteApac]..risk
			group by riskextref) r on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r.riskextref  

inner join [RiskWriteApac]..risk r2 on ltrim(rtrim(fc.F_SPARE_CHAR_2)) = r2.riskextref 
inner join [RiskWriteApac]..client cl on r2.id_clnt = cl.id_clnt
left join  [RiskWriteApac]..risk r3 on ltrim(rtrim(fc.F_SPARE_CHAR_13)) = r3.riskid 
where 1=1
--Report on Claims attached to unbound RISKWRITE policies
and (ltrim(rtrim(isnull(fc.F_SPARE_CHAR_13,''))) = '' or r3.riskid is NULL or r2.riskid <> r3.riskid)
and r.risk_count = 1
and r2.riskstatus in ('NTU','WIP','QUOT')
order by fc.F_INCIDENT_NUMBER 


--*/ 

--select count(*) from Claim_Analysis_Extract  --


-- *****************************************************************
-- *********   END OF FIRST PASS OF CLAIM_ANALYSIS_EXTRACT   *******
-- *****************************************************************


-- *******************************************************************************************************************************
-- ADD NEW COLUMNS TO CLAIM EXTRACT TABLE TO POPULATE NEW KEYS FIELDS WHICH TELLS US WHERE MATCHES HAVE BEEN MADE WITH WHAT METHOD
-- *******************************************************************************************************************************

alter table CLAIM_ANALYSIS_EXTRACT Add [ft_01_match_to_riskextref_and_riskid_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_01_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_02_pol_no_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_02_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_03_piv_pol_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_03_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_04_pol_no_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_04_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_05_piv_pol_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_05_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_07_pol_no_to_riskextref_masked_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_07_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_14_pol_no_to_riskid_partial_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_14_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_15_piv_pol_to_riskid_partial_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_15_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_16_pol_no_to_riskextref_subs_seqno_with_000] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_16_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_17_pol_no_to_riskextref_cleanup_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_17_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_19_pol_no_to_riskdescription_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_19_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_20_pol_no_to_umr_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_20_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_23_pol_no_to_subs_seqno_with_001_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_23_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_24_pol_no_to_subs_seqno_with_002_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_24_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_26_pol_no_with_multi_risks_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_26_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [match_to_riskwrite_with_alternate_methods] [char] (3) NULL

alter table CLAIM_ANALYSIS_EXTRACT Add [bo_30_match_claim_policy_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_30_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_35_match_claim_policy_partial_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_35_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_36_match_claim_EVO_policy_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_36_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [match_to_bo_claim_and_riskwrite_with_alternate_methods] [char] (3) NULL

alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_riskextref] [nvarchar](24) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_riskid] [nvarchar](14) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_risk_status] [nvarchar](5) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_insured_name] [varchar](max) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_inception_date] [datetime] NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_expiry_date] [datetime] NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_risk_type] [nvarchar](5) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_product_id] [nvarchar](20) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_rw_bo_insured_name_match] [char] (3) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [alt_bo_company_name] [varchar](max) NULL

alter table CLAIM_ANALYSIS_EXTRACT Add [resolved_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [resolved_riskid] [nvarchar] (50) NULL

alter table CLAIM_ANALYSIS_EXTRACT Add [low_volume_alt_checks] [char] (30) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_13_piv_pol_to_riskextref_partial_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_13_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_18_piv_pol_to_riskid_cleanup_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_18_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_21_piv_pol_to_riskdescription_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_21_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_25_pol_no_to_subs_seqno_with_003_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_25_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_34_match_claim_policy_partial_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_34_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_37_match_claim_EVO_policy_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_37_riskextref] [nvarchar] (50) NULL

alter table CLAIM_ANALYSIS_EXTRACT Add [redundant_alt_checks] [char] (30) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_06_match_to_riskextref_masked_and_riskid_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_06_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_08_piv_pol_to_riskextref_masked_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_08_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_09_pol_no_to_riskid_masked_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_09_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_10_piv_pol_to_riskid_masked_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_10_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_11_match_to_riskextref_partial_and_riskid_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_11_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_12_pol_no_to_riskextref_partial_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_12_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [ft_22_piv_pol_to_umr_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_22_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_31_match_claim_policy_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_31_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_32_match_claim_policy_masked_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_32_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_33_match_claim_policy_masked_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_33_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_38_match_claim_EVO_policy_masked_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_38_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_39_match_claim_EVO_policy_masked_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_39_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_40_match_claim_EVO_policy_partial_to_riskextref_riskextref] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_40_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [bo_41_match_claim_EVO_policy_partial_to_riskid_riskid] [nvarchar] (50) NULL
alter table CLAIM_ANALYSIS_EXTRACT Add [assoc_41_riskextref] [nvarchar] (50) NULL;

update CLAIM_ANALYSIS_EXTRACT 
		set [match_to_riskwrite_with_alternate_methods] = 'No',
			[match_to_bo_claim_and_riskwrite_with_alternate_methods] = 'No',
			[alt_rw_bo_insured_name_match] = 'No'

update CLAIM_ANALYSIS_EXTRACT 
		set [low_volume_alt_checks] = 'Low Volume Alt Checks --->>>'

update CLAIM_ANALYSIS_EXTRACT 
		set [redundant_alt_checks] = 'Redundant Alt Checks ===>>>'


PRINT '';PRINT 'Remove superfluous duplicate claims'

delete CLAIM_ANALYSIS_EXTRACT
--select *
from 
(select F_INCIDENT_NUMBER, rw_result_code_1 from CLAIM_ANALYSIS_EXTRACT where rw_result_code_1 = '100') c1
inner join CLAIM_ANALYSIS_EXTRACT c2 on c1.F_INCIDENT_NUMBER = c2.F_INCIDENT_NUMBER and c2.rw_result_code_1 = '150'
where 1=1
and c2.rw_result_code_1 = '150'


-- ************************************************************************
-- *********   START SECOND PASS UPDATE OF CLAIM_ANALYSIS_EXTRACT   *******
-- ************************************************************************


-- ************************************************************************
-- Extract Table Field Clean Up - Remove special characters like LF and CR 
-- ************************************************************************

PRINT '';PRINT 'Extract Table Field Clean Up - Remove special characters like LF and CR'

--/*
PRINT '';PRINT 'Remove specialcharacters'
DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove dodgy characters'
DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


PRINT '';PRINT 'Remove specialcharacters again'
--DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters again'
--DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters again'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')

--*/

PRINT '';PRINT 'Remove DUP from beginning of FigTree Insured Name before checking'

update Claim_Analysis_Extract
	set F_SC6_Insured_Name = substring(F_SC6_Insured_Name,4,97)+'   '
--select F_SC6_Insured_Name, substring(F_SC6_Insured_Name,4,97)+'   '
from Claim_Analysis_Extract cae
where 1=1
and left(F_SC6_Insured_Name,3) = 'DUP'


PRINT '';PRINT 'RiskWrite Second Pass Update Name Match 25'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set rw_result_3 = 'Claim Insured Name matches RiskWrite Policy Insured Name for these Claims - RiskWrite Match_Rating increased by 2',
		riskwrite_match_rating = cae.riskwrite_match_rating+2,
		rw_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.rw_insured_name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')

PRINT '';PRINT 'RiskWrite Second Pass Update Name Match 20'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set rw_result_3 = 'Claim Insured Name matches RiskWrite Policy Insured Name for these Claims - RiskWrite Match_Rating increased by 2',
		riskwrite_match_rating = cae.riskwrite_match_rating+2,
		rw_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.rw_insured_name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
and not(rw_insured_name_match) = 'Yes'

PRINT '';PRINT 'RiskWrite Second Pass Update Name Match 15'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set rw_result_3 = 'Claim Insured Name matches RiskWrite Policy Insured Name for these Claims - RiskWrite Match_Rating increased by 2',
		riskwrite_match_rating = cae.riskwrite_match_rating+2,
		rw_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.rw_insured_name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
and not(rw_insured_name_match) = 'Yes'

PRINT '';PRINT 'RiskWrite Second Pass Update Name Match 10'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set rw_result_3 = 'Claim Insured Name matches RiskWrite Policy Insured Name for these Claims - RiskWrite Match_Rating increased by 2',
		riskwrite_match_rating = cae.riskwrite_match_rating+2,
		rw_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.rw_insured_name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
and not(rw_insured_name_match) = 'Yes'

PRINT '';PRINT 'RiskWrite Second Pass Update Name Match 8'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set rw_result_3 = 'Claim Insured Name matches RiskWrite Policy Insured Name for these Claims - RiskWrite Match_Rating increased by 2',
		riskwrite_match_rating = cae.riskwrite_match_rating+2,
		rw_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.rw_insured_name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
and not(rw_insured_name_match) = 'Yes'


PRINT '';PRINT 'RiskWrite Second Pass Update 2'

--Check to see if the Claim Accident Date is within the Policy Period of the UW record it is attached to 
update Claim_Analysis_Extract
	set rw_result_4 = 'Claim Accident Date is within RiskWrite Policy Period of Insurance for these Claims - RiskWrite Match_Rating increased by 1',
		riskwrite_match_rating = cae.riskwrite_match_rating+1,
		rw_accident_date_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and cae.F_ACCIDENT_DATE between cae.rw_inception_date and cae.rw_expiry_date

PRINT '';PRINT 'RiskWrite Second Pass Update 3'

--Check to see if the Claim Accident Date is within the Policy Period of the UW record it is attached to 
update Claim_Analysis_Extract
	set rw_result_5 = 'Claim Policy Period Dates match the RiskWrite Policy Period Dates for these Claims - RiskWrite Match_Rating increased by 1',
		riskwrite_match_rating = cae.riskwrite_match_rating+1,
		rw_policy_period_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
--Check Client/Insured names 
--and cae.rw_result_code_1 in ('010','020','030','031','040','080') 
and ((cae.F_SD4_Inception_Date >= cae.rw_inception_date and cae.F_SD4_Inception_Date < cae.rw_expiry_date)
											or (cae.F_SD2_Expiry_Date > cae.rw_inception_date and cae.F_SD2_Expiry_Date <= cae.rw_expiry_date))	


PRINT '';PRINT 'RiskWrite Second Pass Update 4'

--Check to see if the FIGTREE RISKID matches the RiskWrite RISKEXTREF where no match was made on FIGTREE RISKEXTREF  
update Claim_Analysis_Extract
	set rw_result_2 = 'Claim RISKID matches the RiskWrite RISKEXTREF where no match was made on FIGTREE RISKEXTREF - RiskWrite Match_Rating NOT increased'
--select cae.*
from Claim_Analysis_Extract cae
inner join [RiskWriteApac]..risk rw on ltrim(rtrim(cae.F_SC13_Pivotal_Pol_RW_RISKID)) = rw.riskextref
where 1=1
--Check Client/Insured names 
and cae.rw_riskextref_match = 'No'
and cae.rw_riskid_match = 'No'



-- ************************************************************************
-- *********   END SECOND PASS UPDATE OF CLAIM_ANALYSIS_EXTRACT   *********
-- ************************************************************************


-- ************************************************************************
-- START ANALYSIS ON WEBRATER 
-- ************************************************************************

PRINT '';PRINT 'WebRater Pass Update 1'

-- WEBRATER UPDATE
update CLAIM_ANALYSIS_EXTRACT
	set	wr_policyno = wrs.PolicyNo,
		wr_status = wrs.Status,
		wr_insuredname = wrs.insuredname,
		wr_inceptiondate = wrs.InceptionDate,
		wr_expirydate = wrs.ExpiryDate,  
		wr_previouspolicy_inceptiondate = wrs.PreviousPolicy_InceptionDate,
		wr_previouspolicy_expirydate = wrs.PreviousPolicy_ExpiryDate,
		wr_product = wrs.Product,
		wr_match_rating = 2,
		wr_policyno_match = 'Yes',
		wr_match_type = 'Full Match',
		wr_result_code_1 = '200',
		wr_result_1 = 'Successful match on FIGTREE Policy No. with WEBRATER POLICYNO',
		--wr_insured_name_match = case when left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25) = left(ltrim(rtrim(wrs.insuredname)),25) then 'Yes' else 'No' end,

		wr_insured_name_match = case when 
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(wrs.insuredname)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' else 'No' end,

		wr_accident_date_match = case	when cae.F_ACCIDENT_DATE between wrs.InceptionDate and wrs.ExpiryDate then 'Yes'
										when cae.F_ACCIDENT_DATE between wrs.PreviousPolicy_InceptionDate and wrs.PreviousPolicy_ExpiryDate then 'Yes' 
										else 'No' end,
		wr_policy_period_match = case	when cae.F_SD4_inception_Date >= wrs.InceptionDate and cae.F_SD4_inception_Date < wrs.ExpiryDate then 'Yes'
										when cae.F_SD4_inception_Date >= wrs.PreviousPolicy_InceptionDate and cae.F_SD4_inception_Date < wrs.PreviousPolicy_ExpiryDate then 'Yes'
										else 'No' end
from CLAIM_ANALYSIS_EXTRACT cae
inner join [dbo].[_WRSelfService] wrs on ltrim(rtrim(cae.[F_SC2_Policy_No])) = ltrim(rtrim(wrs.PolicyNo))
where 1=1


PRINT '';PRINT 'WebRater Pass Update 2'

-- Update for WebRater Insured Name Match
update CLAIM_ANALYSIS_EXTRACT
	set wr_result_2 = case when wr_insured_name_match = 'Yes' then 'Claim Insured Name matches WebRater Policy Insured Name for these Claims - WebRater Match_Rating increased by 2' else '' end,
		wr_match_rating = case when wr_insured_name_match = 'Yes' then wr_match_rating+2 else wr_match_rating end 

PRINT '';PRINT 'WebRater Pass Update 3'

-- Update for WeBRater Accident Date in Policy Period Match
update CLAIM_ANALYSIS_EXTRACT
	set wr_result_3 = case when wr_accident_date_match = 'Yes' then 'Claim Accident Date is within WebRater Policy Period of Insurance for these Claims - WebRater Match_Rating increased by 1' else '' end,
		wr_match_rating = case when wr_accident_date_match = 'Yes' then wr_match_rating+1 else wr_match_rating end 

PRINT '';PRINT 'WebRater Pass Update 4'

-- Update for WeBRater Policy Period Match
update CLAIM_ANALYSIS_EXTRACT
	set wr_result_4 = case when wr_policy_period_match = 'Yes' then 'Claim Policy Period Dates match the WebRater Policy Period Dates for these Claims - WebRater Match_Rating increased by 1' else '' end,
		wr_match_rating = case when wr_policy_period_match = 'Yes' then wr_match_rating+1 else wr_match_rating end 


-- ************************************************************************
-- END ANALYSIS ON WEBRATER 
-- ************************************************************************
-- ************************************************************************
-- START ANALYSIS ON BACKOFFICE 
-- ************************************************************************
 
PRINT '';PRINT 'BackOffice Pass Update 1'

-- BACKOFFICE
update CLAIM_ANALYSIS_EXTRACT
	set	
		bo_policy = bo.Policy__,
		bo_status = bo.Status,
		bo_company_na = bo.COMPANY_NA,
		bo_policy_fro = bo.POLICY_FRO,
		bo_policy_to = bo.POLICY_FRO,  
		bo_contract = bo.CONTRACT,
		bo_match_rating = 2,
		bo_match_type = 'Full Match',
		bo_policyno_match = 'Yes',
		bo_result_code_1 = '300',
		bo_result_1 = 'Successful match on FIGTREE Policy No. with BACKOFFICE POLICY',
		--bo_insured_name_match = case	when left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25) = left(ltrim(rtrim(bo.COMPANY_NA)),25) then 'Yes' else 'No' end,
		bo_insured_name_match = 
			case when
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
				replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' 
			when
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
				replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' 
			when
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
				replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' 
			when
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
				replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' 
			when
			replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') = 
				replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')','') then 'Yes' 																
				else 'No' end,

		bo_accident_date_match = case	when cae.F_ACCIDENT_DATE between bo.POLICY_FRO and bo.POLICY_TO then 'Yes' else 'No' end,
		bo_policy_period_match = case	when cae.F_SD4_inception_Date >= bo.POLICY_FRO and cae.F_SD4_inception_Date < bo.POLICY_TO then 'Yes' else 'No' end
--select cae.F_INCIDENT_NUMBER, cae.F_Claim_Status, cae.F_SC6_Insured_Name, cae.riskwrite_match_rating, cae.F_SC2_Policy_No, cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.rw_result_code_1, cae.rw_result_1, bo.* 
from CLAIM_ANALYSIS_EXTRACT cae
inner join [dbo].BO_DUALDATA bo on ltrim(rtrim(cae.[F_SC2_Policy_No])) = ltrim(rtrim(bo.POLICY__))
where 1=1

--update CLAIM_ANALYSIS_EXTRACT
--	set	
--		bo_insured_name_match = case	when replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.','') = replace(replace(left(ltrim(rtrim(bo.COMPANY_NA)),25),'&',''),'.','') then 'Yes' else 'No' end
--from CLAIM_ANALYSIS_EXTRACT cae
--inner join [dbo].BO_DUALDATA bo on ltrim(rtrim(cae.[F_SC2_Policy_No])) = ltrim(rtrim(bo.POLICY__))
--where 1=1


PRINT '';
PRINT 'BackOffice Pass Update 2'

-- Update for BackOffice Insured Name Match
update CLAIM_ANALYSIS_EXTRACT
	set bo_result_2 = case when bo_insured_name_match = 'Yes' then 'Claim Insured Name matches BackOffice Policy Insured Name for these Claims - BackOffice Match_Rating increased by 2' else '' end,
		bo_match_rating = case when bo_insured_name_match = 'Yes' then bo_match_rating+2 else bo_match_rating end 

PRINT '';PRINT 'BackOffice Pass Update 3'

-- Update for BackOffice Accident Date in Policy Period Match
update CLAIM_ANALYSIS_EXTRACT
	set bo_result_3 = case when bo_accident_date_match = 'Yes' then 'Claim Accident Date is within BackOffice Policy Period of Insurance for these Claims - BackOffice Match_Rating increased by 1' else '' end,
		bo_match_rating = case when bo_accident_date_match = 'Yes' then bo_match_rating+1 else bo_match_rating end 

PRINT '';PRINT 'BackOffice Pass Update 4'

-- Update for BackOffice Policy Period Match
update CLAIM_ANALYSIS_EXTRACT
	set bo_result_4 = case when bo_policy_period_match = 'Yes' then 'Claim Policy Period Dates match the backoffice Policy Period Dates for these Claims - Backoffice Match_Rating increased by 1' else '' end,
		bo_match_rating = case when bo_policy_period_match = 'Yes' then bo_match_rating+1 else bo_match_rating end 



-- ************************************************************************
-- END ANALYSIS ON BACKOFFICE
-- ************************************************************************


-- *****************************************************************************************************
-- TRY TO FIND SOME MATCHES IN 3 x UW SYSTEMS BY MASKING THE FIGTREE Policy No. WITH OTHER CHARACTERS
-- *****************************************************************************************************

PRINT '';PRINT 'Update based on match with masked Policy No - replace dashes with slashes'

-- Most RiskExtRef fields have delimiters of slashes (/), whereas FIGTREE sometimes has delimiters of dashes (-).  Try finding matches by replacing slash with dash where no match has been made with original feidl value.
 
update [CLAIM_ANALYSIS_EXTRACT]
	set	rw_matching_result_with_policy_no_masking = case when not(rw.riskextref is NULL) then 'Match made on RiskWrite with FIGTREE Policy No. with RW RiskExtRef when replacing DASHES with SLASHES' else NULL end,
		wr_matching_result_with_policy_no_masking = case when not(wr.PolicyNo is NULL) then 'Match made on WebRater with FIGTREE Policy No. with WR Policy No. when replacing DASHES with SLASHES' else NULL end,
		bo_matching_result_with_policy_no_masking = case when not(bo.POLICY__ is NULL) then 'Match made on BackOffice with FIGTREE Policy No. with BO Policy when replacing DASHES with SLASHES' else NULL end,
		policy_no_matched_with_masking = case when not(rw.riskextref is NULL and wr.PolicyNo is NULL and bo.POLICY__ is NULL) then 'Yes' else 'No ' end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, rw.riskextref, wr.PolicyNo, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
left join [RiskWriteApac]..risk rw on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/') = rw.riskextref
left join [RiskWriteApac]..[_WRSelfService] wr on replace(ltrim(rtrim(ce.F_SC2_Policy_No)),'-','/') = ltrim(rtrim(wr.PolicyNo))
left join [RiskWriteApac]..BO_DUALDATA bo on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/')  = ltrim(rtrim(bo.POLICY__))
where 1=1
and ce.rw_riskextref_match = 'No'
and ce.wr_policyno_match = 'No'
and ce.bo_policyno_match = 'No'
and ce.F_SC2_Policy_No like '%-%'
and not(rw.riskextref is NULL and wr.PolicyNo is NULL and bo.POLICY__ is NULL)


-- **************************************************************************************************************
-- TRY TO FIND SOME MATCHES ON RISKWRITE RISKID BY MASKING THE FIGTREE Pivtoal Policy WITH OTHER CHARACTERS
-- **************************************************************************************************************

PRINT '';PRINT 'Update based on match with masked Pivotal Policy - replace dashes with slashes'


-- Most RiskExtRef fields have delimiters of slashes (/), whereas FIGTREE sometimes has delimiters of dashes (-).  Try finding matches by replacing slash with dash where no match has been made with original feidl value.
 
update [CLAIM_ANALYSIS_EXTRACT]
	set	rw_matching_result_with_riskid_masking = case when not(rw.riskid is NULL) then 'Match made on RiskWrite with FIGTREE Pivotal Policy with RW RiskID when replacing DASHES with SLASHES' else NULL end,
		riskid_matched_to_RISKWRITE_with_masking = case when not(rw.riskid is NULL) then 'Yes' else 'No ' end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC13_Pivotal_Pol_RW_RISKID, rw.riskextref, rw.riskid, ce.overall_match_rating
from [CLAIM_ANALYSIS_EXTRACT] ce
left join [RiskWriteApac]..risk rw on replace(ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)), '-','/') = rw.riskid
where 1=1
and ce.rw_riskid_match = 'No'
and ce.F_SC13_Pivotal_Pol_RW_RISKID like '%-%'
and not(rw.riskid is NULL)

-- **********************************************************************************************************************************************************************
-- TRY TO FIND SOME MATCHES IN BACKOFFICE BY COMPARING FIGTREE POLICY NO. TO BACKOFFICE EVO POLICY NUMBER and THEN CHECKING BACKOFFICE POLICY NO AGAINST RISKWRITE 
-- **********************************************************************************************************************************************************************
 
PRINT '';PRINT 'Update on BO Policy No to RW match - replace dashes with slashes'

update [CLAIM_ANALYSIS_EXTRACT]
	set	policy_no_matched_to_BO_EVO_Policy_No = 'Yes',
		bo_result_5 = 'Match made on BackOffice EVO Policy No. with FIGTREE Policy No.',
		rw_result_code_6 = case when not(r.riskextref is NULL) then '400' else '410' end,  
		rw_result_6 = case when not(r.riskextref is NULL) then 'FIGTREE Policy No. not matched to RISKWRITE but matched to BO EVO Policy No. and BO Policy No. matched to RW RiskExtRef' 
						else 'FIGTREE Policy No. not matched to RISKWRITE but matched to BO EVO Policy No. but BO Policy No. NOT matched to RW RiskExtRef' end,
		BO_policy_no_after_match_on_EVO_policy_no = bo.POLICY__				 
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
inner join [RiskWriteApac]..BO_DUALDATA bo on ltrim(rtrim(ce.F_SC2_Policy_No)) = ltrim(rtrim(bo.EVO))
left join  [RiskWriteApac]..risk r on ltrim(rtrim(bo.POLICY__)) = r.riskextref
where 1=1
and ce.rw_riskextref_match = 'No'
and ce.bo_policyno_match = 'No'

-- ********************************************************************************************************************************************************************************
-- TRY TO FIND SOME MATCHES IN BACKOFFICE BY COMPARING FIGTREE POLICY NO. TO BACKOFFICE EVO POLICY NUMBER WITH MASKING and THEN CHECKING BACKOFFICE POLICY NO AGAINST RISKWRITE 
-- ********************************************************************************************************************************************************************************

PRINT '';PRINT 'Update on masked BO Policy No to RW match - replace dashes with slashes'
 
update [CLAIM_ANALYSIS_EXTRACT]
	set	policy_no_matched_to_BO_EVO_Policy_No = 'Yes',
		bo_result_5 = 'Match made on BackOffice EVO Policy No. with FIGTREE Policy No. after masking Policy No.',
		rw_result_code_7 = case when not(r.riskextref is NULL) then '500' else '510' end,  
		rw_result_7 = case when not(r.riskextref is NULL) then 'FIGTREE Policy No. not matched to RISKWRITE but matched to BO EVO Policy No. and BO Policy No. matched to RW RiskExtRef after Policy No. masking' 
						else 'FIGTREE Policy No. not matched to RISKWRITE but matched to BO EVO Policy No. after masking but BO Policy No. NOT matched to RW RiskExtRef' end,
		BO_policy_no_after_match_on_EVO_policy_no = ltrim(rtrim(bo.POLICY__))				 
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
inner join [RiskWriteApac]..BO_DUALDATA bo on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/') = ltrim(rtrim(bo.EVO))
left join  [RiskWriteApac]..risk r on ltrim(rtrim(bo.POLICY__)) = r.riskextref
where 1=1
and ce.rw_riskextref_match = 'No'
and ce.bo_policyno_match = 'No'
and ce.F_SC2_Policy_No like '%-%'


-- **************************************************************************************
-- POPULATE NEW KEYS FIELDS WHICH TELLS US WHERE MATCHES HAVE BEEN MADE WITH WHAT METHOD
-- **************************************************************************************

-- Direct FigTree fields to RiskWrite
PRINT '';PRINT 'Populate the extract file RiskWrite fields based on matching with raw FigTree data'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to RiskWrite
--1
ft_01_match_to_riskextref_and_riskid_riskextref = ft_match_to_riskextref_and_riskid.riskextref,
assoc_01_riskid = ft_match_to_riskextref_and_riskid.riskid,
--2
ft_02_pol_no_to_riskextref_riskextref = ft_pol_no_to_riskextref.riskextref,
assoc_02_riskid = case when ce.rw_result_code_1 = '031' then ce.rw_riskid else ft_pol_no_to_riskextref.riskid end,
--3
ft_03_piv_pol_to_riskextref_riskextref = ft_piv_pol_to_riskextref.riskextref,
assoc_03_riskid = ft_piv_pol_to_riskextref.riskid,
--4
ft_04_pol_no_to_riskid_riskid = ft_pol_no_to_riskid.riskid,
assoc_04_riskextref = ft_pol_no_to_riskid.riskextref,
--5
ft_05_piv_pol_to_riskid_riskid = ft_piv_pol_to_riskid.riskid,
assoc_05_riskextref = ft_piv_pol_to_riskid.riskextref
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, ce.rw_result_code_1, ce.rw_riskextref, ce.rw_riskid, ft_pol_no_to_riskextref.riskextref, ft_piv_pol_to_riskextref.riskextref , ft_pol_no_to_riskid.riskid, ft_piv_pol_to_riskid.riskid
from [CLAIM_ANALYSIS_EXTRACT] ce
-- Direct FigTree fields to RiskWrite 
--1
left join risk ft_match_to_riskextref_and_riskid on 
				ltrim(rtrim(ce.F_SC2_Policy_No)) = ft_match_to_riskextref_and_riskid.riskextref and ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_match_to_riskextref_and_riskid.riskid
--2
left join risk ft_pol_no_to_riskextref on ltrim(rtrim(ce.F_SC2_Policy_No)) = ft_pol_no_to_riskextref.riskextref and not(ft_pol_no_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
--3
left join risk ft_piv_pol_to_riskextref on ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_piv_pol_to_riskextref.riskextref and not(ft_piv_pol_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
--4
left join risk ft_pol_no_to_riskid on ltrim(rtrim(ce.F_SC2_Policy_No)) = ft_pol_no_to_riskid.riskid and not(ft_pol_no_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
--5
left join risk ft_piv_pol_to_riskid on ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_piv_pol_to_riskid.riskid and not(ft_piv_pol_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1
 

PRINT '';PRINT 'Populate the extract file RiskWrite fields based on matching with MASKED FigTree data'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Masked FigTree fields to RiskWrite
--select
--6
ft_06_match_to_riskextref_masked_and_riskid_riskextref = case when ce.F_SC2_Policy_No like '%-%' then ft_match_to_riskextref_and_riskid.riskextref else NULL end,
assoc_06_riskid = case when ce.F_SC2_Policy_No like '%-%' then ft_match_to_riskextref_and_riskid.riskid else NULL end,
--7
ft_07_pol_no_to_riskextref_masked_riskextref = case when ce.F_SC2_Policy_No like '%-%' then ft_pol_no_to_riskextref.riskextref else NULL end,
assoc_07_riskid = case when ce.F_SC2_Policy_No like '%-%' then ft_pol_no_to_riskextref.riskid else NULL end,
--8
ft_08_piv_pol_to_riskextref_masked_riskextref = case when ce.F_SC13_Pivotal_Pol_RW_RISKID like '%-%' then ft_piv_pol_to_riskextref.riskextref else NULL end,
assoc_08_riskid = case when ce.F_SC13_Pivotal_Pol_RW_RISKID like '%-%' then ft_piv_pol_to_riskextref.riskid else NULL end,
--9
ft_09_pol_no_to_riskid_masked_riskid = case when ce.F_SC2_Policy_No like '%-%' then ft_pol_no_to_riskid.riskid else NULL end,
assoc_09_riskextref = case when ce.F_SC2_Policy_No like '%-%' then ft_pol_no_to_riskid.riskextref else NULL end,
--10
ft_10_piv_pol_to_riskid_masked_riskid = case when ce.F_SC13_Pivotal_Pol_RW_RISKID like '%-%' then ft_piv_pol_to_riskid.riskid else NULL end,
assoc_10_riskextref = case when ce.F_SC13_Pivotal_Pol_RW_RISKID like '%-%' then ft_piv_pol_to_riskid.riskextref else NULL end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
-- Direct FigTree fields to RiskWrite 
--6
left join risk ft_match_to_riskextref_and_riskid 
		on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/') = ft_match_to_riskextref_and_riskid.riskextref and ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_match_to_riskextref_and_riskid.riskid
--7
left join risk ft_pol_no_to_riskextref on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/') = ft_pol_no_to_riskextref.riskextref and not(ft_pol_no_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--8
left join risk ft_piv_pol_to_riskextref on replace(ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)), '-','/') = ft_piv_pol_to_riskextref.riskextref and not(ft_piv_pol_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
--9
left join risk ft_pol_no_to_riskid on replace(ltrim(rtrim(ce.F_SC2_Policy_No)), '-','/') = ft_pol_no_to_riskid.riskid  and not(ft_pol_no_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
--10
left join risk ft_piv_pol_to_riskid on replace(ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)), '-','/') = ft_piv_pol_to_riskid.riskid and not(ft_piv_pol_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1

PRINT '';PRINT 'Populate the extract file RiskWrite fields based on matching with Partial FigTree data'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Partial FigTree fields to RiskWrite
--select ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_Number, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_result_code_1,
--11
ft_11_match_to_riskextref_partial_and_riskid_riskextref = case when len(ce.F_SC2_Policy_No) > 13 then ft_match_to_riskextref_and_riskid.riskextref else NULL end,
assoc_11_riskid = case when len(ce.F_SC2_Policy_No) > 13 then ft_match_to_riskextref_and_riskid.riskid else NULL end,
--12
ft_12_pol_no_to_riskextref_partial_riskextref = case when len(ce.F_SC2_Policy_No) > 13 then ft_pol_no_to_riskextref.riskextref else NULL end,
assoc_12_riskid = case when len(ce.F_SC2_Policy_No) > 13 then ft_pol_no_to_riskextref.riskid else NULL end,
--13
ft_13_piv_pol_to_riskextref_partial_riskextref = case when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 then ft_piv_pol_to_riskextref.riskextref else NULL end,
assoc_13_riskid = case when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 then ft_piv_pol_to_riskextref.riskid else NULL end,
--14
ft_14_pol_no_to_riskid_partial_riskid = case when len(ce.F_SC2_Policy_No) > 13 then ft_pol_no_to_riskid.riskid else NULL end,
assoc_14_riskextref = case when len(ce.F_SC2_Policy_No) > 13 then ft_pol_no_to_riskid.riskextref else NULL end,
--15
ft_15_piv_pol_to_riskid_partial_riskid = case when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 and ce.rw_riskid = ft_piv_pol_to_riskid.riskid then ft_piv_pol_to_riskid.riskid
											  when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 and ce.rw_riskid <> ft_piv_pol_to_riskid.riskid and ce.rw_riskid <> '' then NULL 
											  else ft_piv_pol_to_riskid.riskid end,
assoc_15_riskextref = case when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 and ce.rw_riskid = ft_piv_pol_to_riskid.riskid then ft_piv_pol_to_riskid.riskextref 
						   when len(ce.F_SC13_Pivotal_Pol_RW_RISKID) > 13 and ce.rw_riskid <> ft_piv_pol_to_riskid.riskid  and ce.rw_riskid <> '' then NULL 
						   else ft_piv_pol_to_riskid.riskextref end	

--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
-- Direct FigTree fields to RiskWrite 
--11
left join risk ft_match_to_riskextref_and_riskid 
		on left(ltrim(ce.F_SC2_Policy_No),13) = ft_match_to_riskextref_and_riskid.riskextref and ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_match_to_riskextref_and_riskid.riskid
--12
left join risk ft_pol_no_to_riskextref on left(ltrim(ce.F_SC2_Policy_No),13) = ft_pol_no_to_riskextref.riskextref and not(ft_pol_no_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--13
left join risk ft_piv_pol_to_riskextref on left(ltrim(ce.F_SC13_Pivotal_Pol_RW_RISKID),13) = ft_piv_pol_to_riskextref.riskextref and not(ft_piv_pol_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
--14
left join risk ft_pol_no_to_riskid on left(ltrim(ce.F_SC2_Policy_No),13) = ft_pol_no_to_riskid.riskid and not(ft_pol_no_to_riskid.riskstatus in ('NTU','WIP','QUOT')) 
--15
left join risk ft_piv_pol_to_riskid on left(ltrim(ce.F_SC13_Pivotal_Pol_RW_RISKID),13) = ft_piv_pol_to_riskid.riskid and not(ft_piv_pol_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1
--and ce.F_INCIDENT_NUMBER = '2016C0007997'


PRINT '';PRINT 'Populate the extract file BackOffice fields based on matching with raw FigTree data to BackOffice then RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then RiskWrite
--30
--select
bo_30_match_claim_policy_to_riskextref_riskextref = bo_match_policy_to_riskextref.riskextref,
assoc_30_riskid = bo_match_policy_to_riskextref.riskid,
--31
bo_31_match_claim_policy_to_riskid_riskid = bo_match_policy_to_riskid.riskid,
assoc_31_riskextref = bo_match_policy_to_riskid.riskextref
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Direct Backoffice Policy No. to RiskWrite 
--30
left join risk bo_match_policy_to_riskextref on ltrim(rtrim(bc.POLICY_NUM)) = bo_match_policy_to_riskextref.riskextref and not(bo_match_policy_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--31
left join risk bo_match_policy_to_riskid on ltrim(rtrim(bc.POLICY_NUM)) = bo_match_policy_to_riskid.riskid and not(bo_match_policy_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1

PRINT '';PRINT 'Populate the extract file BackOffice fields based on matching with raw FigTree data to BackOffice then masked to RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then masked to RiskWrite
--32
--select
bo_32_match_claim_policy_masked_to_riskextref_riskextref = case when bc.POLICY_NUM like '%-%' then bo_match_policy_masked_to_riskextref.riskextref else NULL end,
assoc_32_riskid = case when bc.POLICY_NUM like '%-%' then bo_match_policy_masked_to_riskextref.riskid else NULL end,
--33
bo_33_match_claim_policy_masked_to_riskid_riskid = case when bc.POLICY_NUM like '%-%' then bo_match_policy_masked_to_riskid.riskid else NULL end,
assoc_33_riskextref = case when bc.POLICY_NUM like '%-%' then bo_match_policy_masked_to_riskid.riskextref else NULL end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Direct from FigTree to Backoffice then masked Policy No. to RiskWrite 
--32
left join risk bo_match_policy_masked_to_riskextref on replace(bc.POLICY_NUM, '-','/') = bo_match_policy_masked_to_riskextref.riskextref and not(bo_match_policy_masked_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--33
left join risk bo_match_policy_masked_to_riskid on replace(bc.POLICY_NUM, '-','/') = bo_match_policy_masked_to_riskid.riskid and not(bo_match_policy_masked_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1

PRINT '';PRINT 'Populate the extract file BackOffice fields based on matching with raw FigTree data to BackOffice then partial key to RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then partial key to RiskWrite
--34
--select ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID,
bo_34_match_claim_policy_partial_to_riskextref_riskextref = case when len(ltrim(rtrim(bc.POLICY_NUM))) > 13 then bo_match_policy_partial_to_riskextref.riskextref else NULL end,
assoc_34_riskid = case when len(ltrim(rtrim(bc.POLICY_NUM))) > 13 then bo_match_policy_partial_to_riskextref.riskid else NULL end,
--35
bo_35_match_claim_policy_partial_to_riskid_riskid = case when len(ltrim(rtrim(bc.POLICY_NUM))) > 13 then bo_match_policy_partial_to_riskid.riskid else NULL end,
assoc_35_riskextref = case when len(rtrim(ltrim(bc.POLICY_NUM))) > 13 then bo_match_policy_partial_to_riskid.riskextref else NULL end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Direct from FigTree to Backoffice then masked Policy No. to RiskWrite 
--34
left join risk bo_match_policy_partial_to_riskextref on left(ltrim(rtrim(bc.POLICY_NUM)),13) = bo_match_policy_partial_to_riskextref.riskextref 
														and not(bo_match_policy_partial_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--35
left join risk bo_match_policy_partial_to_riskid on left(ltrim(rtrim(bc.POLICY_NUM)),13) = bo_match_policy_partial_to_riskid.riskid 
														and not(bo_match_policy_partial_to_riskid.riskstatus in ('NTU','WIP','QUOT'))
where 1=1


PRINT '';PRINT 'Populate the extract file BackOffice fields based on matching with raw FigTree data to BackOffice then use EVO Policy for RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then use EVO Policy No to RiskWrite
--36
--select
bo_36_match_claim_EVO_policy_to_riskextref_riskextref = bo_match_EVO_policy_to_riskextref.riskextref,
assoc_36_riskid = bo_match_EVO_policy_to_riskextref.riskid,
--37
bo_37_match_claim_EVO_policy_to_riskid_riskid = bo_match_EVO_policy_to_riskid.riskid,
assoc_37_riskextref = bo_match_EVO_policy_to_riskid.riskextref
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Direct Backoffice EVO Policy No. to RiskWrite 
--36
left join risk bo_match_EVO_policy_to_riskextref on bd.EVO = bo_match_EVO_policy_to_riskextref.riskextref
--37
left join risk bo_match_EVO_policy_to_riskid on bd.EVO = bo_match_EVO_policy_to_riskid.riskid
where 1=1

PRINT '';PRINT 'Populate the extract file BackOffice EVO fields based on matching with raw FigTree data to BackOffice then use masked EVO to RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then masked EVO to RiskWrite
--38
--select
bo_38_match_claim_EVO_policy_masked_to_riskextref_riskextref = case when bd.EVO like '%-%' then bo_match_EVO_policy_masked_to_riskextref.riskextref else NULL end,
assoc_38_riskid = case when bd.EVO like '%-%' then bo_match_EVO_policy_masked_to_riskextref.riskid else NULL end,
--39
bo_39_match_claim_EVO_policy_masked_to_riskid_riskid = case when bc.POLICY_NUM like '%-%' then bo_match_EVO_policy_masked_to_riskid.riskid else NULL end,
assoc_39_riskextref = case when bc.POLICY_NUM like '%-%' then bo_match_EVO_policy_masked_to_riskid.riskextref else NULL end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Direct from FigTree to Backoffice then masked EVO Policy No. to RiskWrite 
--38
left join risk bo_match_EVO_policy_masked_to_riskextref on replace(bd.EVO, '-','/') = bo_match_EVO_policy_masked_to_riskextref.riskextref and not(bo_match_EVO_policy_masked_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--39
left join risk bo_match_EVO_policy_masked_to_riskid on replace(bd.EVO, '-','/') = bo_match_EVO_policy_masked_to_riskid.riskid and not(bo_match_EVO_policy_masked_to_riskid.riskstatus in ('NTU','WIP','QUOT')) 
where 1=1

PRINT '';PRINT 'Populate the extract file BackOffice fields based on matching with raw FigTree data to BackOffice then partial EVO key to RiskWrite'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to BackOffice and then partial EVO key to RiskWrite
--40
--select
bo_40_match_claim_EVO_policy_partial_to_riskextref_riskextref = case when len(ltrim(bd.EVO)) > 13 then bo_match_EVO_policy_partial_to_riskextref.riskextref else NULL end,
assoc_40_riskid = case when len(ltrim(bd.EVO)) > 13 then bo_match_EVO_policy_partial_to_riskextref.riskid else NULL end,
--41
bo_41_match_claim_EVO_policy_partial_to_riskid_riskid = case when len(ltrim(bd.EVO)) > 13 then bo_match_EVO_policy_partial_to_riskid.riskid else NULL end,
assoc_41_riskextref = case when len(ltrim(bd.EVO)) > 13 then bo_match_EVO_policy_partial_to_riskid.riskextref else NULL end
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, bo.EVO, bo.POLICY__, ce.rw_riskextref_match, ce.wr_match_rating, ce.bo_match_rating,  ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join BO_DUALCLAIM bc on bc.FTCLMNUMBE = ce.F_INCIDENT_NUMBER
inner join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
--Partial string Backoffice EVO Policy No. to RiskWrite 
--40
left join risk bo_match_EVO_policy_partial_to_riskextref on left(ltrim(bd.EVO),13) = bo_match_EVO_policy_partial_to_riskextref.riskextref and not(bo_match_EVO_policy_partial_to_riskextref.riskstatus in ('NTU','WIP','QUOT')) 
--41
left join risk bo_match_EVO_policy_partial_to_riskid on left(ltrim(bd.EVO),13) = bo_match_EVO_policy_partial_to_riskextref.riskid
where 1=1

PRINT '';PRINT 'ft16 = 1 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed to 000 - single Risk'
--16 - 1
if OBJECT_ID('tempdb..#update_claim_temp') is not null drop table #update_claim_temp

select distinct a.*, r1.riskid
into #update_claim_temp
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'000'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) between '001' and '999'
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
union all
select distinct a.*, r1.riskid
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'000'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) between '001' and '999' 
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1

PRINT '';PRINT 'Update Claim Extract table - ft16 = 1'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_16_pol_no_to_riskextref_subs_seqno_with_000] = ct.New_Policy_Key,
		[assoc_16_riskid] = ct.riskid
--select * 
from #update_claim_temp ct
inner join CLAIM_ANALYSIS_EXTRACT ce on ct.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER


PRINT '';PRINT 'ft16 > 1 -Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed to 000 - multi-Risk with match only Cover Start Year'
--16 - > 1
if OBJECT_ID('tempdb..#update_claim_temp_2') is not null drop table #update_claim_temp_2

select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate 
into #update_claim_temp_2
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'000'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,14,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) between '001' and '999'
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))

union all
select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'000'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,15,2) as Year_CCYY

--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) between '001' and '999' 
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))

PRINT '';PRINT 'Update Claim Extract table - ft16'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_16_pol_no_to_riskextref_subs_seqno_with_000] = ct2.New_Policy_Key,
		[assoc_16_riskid] = ct2.riskid
--select * 
from #update_claim_temp_2 ct2
inner join CLAIM_ANALYSIS_EXTRACT ce on ct2.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER

PRINT '';PRINT 'ft23 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 001 - single Risk'
--23 - 1
if OBJECT_ID('tempdb..#update_claim_temp_23a') is not null drop table #update_claim_temp_23a

select distinct a.*, r1.riskid
into #update_claim_temp_23a
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'001'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000'
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))
union all
select distinct a.*, r1.riskid
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'001'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

PRINT '';PRINT 'Update Claim Extract table - ft23'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_23_pol_no_to_subs_seqno_with_001_riskextref] = ct23.New_Policy_Key,
		[assoc_23_riskid] = ct23.riskid
--select * 
from #update_claim_temp_23a ct23
inner join CLAIM_ANALYSIS_EXTRACT ce on ct23.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER


PRINT '';PRINT 'ft_23 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 001 - multi-Risk with match only Cover Start Year'
--23 - > 1
if OBJECT_ID('tempdb..#update_claim_temp_23b') is not null drop table #update_claim_temp_23b

select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate 
into #update_claim_temp_23b
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'001'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,14,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000' 
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))
union all
select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'001'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,15,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'  
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))

PRINT '';PRINT 'Update Claim Extract table with ft_23'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_23_pol_no_to_subs_seqno_with_001_riskextref] = ct23.New_Policy_Key,
		[assoc_23_riskid] = ct23.riskid
--select * 
from #update_claim_temp_23b ct23
inner join CLAIM_ANALYSIS_EXTRACT ce on ct23.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER

PRINT '';PRINT 'Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 002 - single Risk'
--24 - 1
if OBJECT_ID('tempdb..#update_claim_temp_24a') is not null drop table #update_claim_temp_24a

select distinct a.*, r1.riskid
into #update_claim_temp_24a
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'002'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000'
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

union all
select distinct a.*, r1.riskid
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'002'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

PRINT '';PRINT 'Update Claim Extract table'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_24_pol_no_to_subs_seqno_with_002_riskextref] = ct24.New_Policy_Key,
		[assoc_24_riskid] = ct24.riskid
--select * 
from #update_claim_temp_24a ct24
inner join CLAIM_ANALYSIS_EXTRACT ce on ct24.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER


PRINT '';PRINT 'ft_24 > 1 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 002 - multi-Risk with match only Cover Start Year'
--24 - > 1
if OBJECT_ID('tempdb..#update_claim_temp_24b') is not null drop table #update_claim_temp_24b

select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate 
into #update_claim_temp_24b
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'002'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,14,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000' 
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))
union all
select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'002'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,15,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'  
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))

PRINT '';PRINT 'Update Claim Extract table with ft_24 > 1'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_24_pol_no_to_subs_seqno_with_002_riskextref] = ct24.New_Policy_Key,
		[assoc_24_riskid] = ct24.riskid
--select * 
from #update_claim_temp_24b ct24
inner join CLAIM_ANALYSIS_EXTRACT ce on ct24.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER


PRINT '';PRINT 'ft_25 = 1 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 003 - single Risk'
--25 - 1
if OBJECT_ID('tempdb..#update_claim_temp_25a') is not null drop table #update_claim_temp_25a

select distinct a.*, r1.riskid
into #update_claim_temp_25a
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'003'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000'
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

union all
select distinct a.*, r1.riskid
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'003'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join risk r1 on a.New_Policy_Key = r1.riskextref
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r2 on a.New_Policy_Key = r2.riskextref
where 1=1
and r2.No_of_Risks = 1
and not(r1.riskstatus in ('NTU','WIP','QUOT'))

PRINT '';PRINT 'Update Claim Extract table with ft_25'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_25_pol_no_to_subs_seqno_with_003_riskextref] = ct25.New_Policy_Key,
		[assoc_25_riskid] = ct25.riskid
--select * 
from #update_claim_temp_25a ct25
inner join CLAIM_ANALYSIS_EXTRACT ce on ct25.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER


PRINT '';PRINT 'ft_25 > 1 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has had the Policy No. Sequence No. changed from 000 to 003 - multi-Risk with match only Cover Start Year'
--25 - > 1
if OBJECT_ID('tempdb..#update_claim_temp_25b') is not null drop table #update_claim_temp_25b

select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate 
into #update_claim_temp_25b
from
(select 
--top 100
'9' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,10,3) as PolSeq,
left(ce.F_SC2_Policy_No,9)+'003'+substring(ce.F_SC2_Policy_No,13,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,14,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,3) = '000' 
and substring(ce.F_SC2_Policy_No,9,1) in ('/','0')  
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,10,3) like '%G%' or substring(ce.F_SC2_Policy_No,10,3) like '%H%' or substring(ce.F_SC2_Policy_No,10,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))
union all
select distinct a.*, r3.riskid, r3.coverstart, r3.expirydate
from
(select 
--top 100
'10' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, substring(ce.F_SC2_Policy_No,11,3) as PolSeq,
left(ce.F_SC2_Policy_No,10)+'003'+substring(ce.F_SC2_Policy_No,14,5) as New_Policy_Key, '20'+substring(ce.F_SC2_Policy_No,15,2) as Year_CCYY
--distinct substring(ce.F_SC2_Policy_No,10,3) as PolSeq
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and rw_result_code_1 = '050'
and not(F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,11,3) = '000'  
and substring(ce.F_SC2_Policy_No,10,1) in ('/','0') 
and substring(ce.F_SC2_Policy_No,14,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,11,3) is NULL) 
and substring(ce.F_SC2_Policy_No,11,3) like '%[^A-Z]%'
and not(substring(ce.F_SC2_Policy_No,11,3) like '%G%' or substring(ce.F_SC2_Policy_No,11,3) like '%H%' or substring(ce.F_SC2_Policy_No,11,3) like '%F%')
and not(left(ltrim(ce.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(ce.F_SC2_Policy_No),3) in ('PPI','PIT'))) a

inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on a.New_Policy_Key = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) r2 on a.New_Policy_Key = r2.riskextref
inner join risk r3 on a.New_Policy_Key = r3.riskextref and r2.max_id_risk = r3.id_risk
where 1=1
and r1.No_of_Risks > 1
and a.Year_CCYY = cast(year(r3.coverstart) as varchar(4))

PRINT '';PRINT 'Update Claim Extract table with ft_25'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_25_pol_no_to_subs_seqno_with_003_riskextref] = ct25.New_Policy_Key,
		[assoc_25_riskid] = ct25.riskid
--select * 
from #update_claim_temp_25b ct25
inner join CLAIM_ANALYSIS_EXTRACT ce on ct25.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER

--/*
PRINT '';PRINT 'ft_26 - Populate the extract file RiskWrite fields based on matching with raw FigTree data that has a Policy No. but NO Pivotal Policy'
		 PRINT 'and the Policy No. has multiple Risks for the Policy No - find the Risk with a matching Year'

--26 - 1
if OBJECT_ID('tempdb..#update_claim_temp_26') is not null drop table #update_claim_temp_26

select 
--top 100
'13' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_result_code_1,
substring(ce.F_SC2_Policy_No,14,2) as YY1,
r2.riskextref, r2.riskid,
substring(r2.riskid,10,2) as riskid_YY,
year(r2.coverstart) as Inc_YY, year(r2.expirydate) as Exp_YY,
'20'+substring(ce.F_SC2_Policy_No,14,2) as Policy_No_Year, cast(year(r2.coverstart) as varchar(4)) as rmax_Year_Start
into #update_claim_temp_26
from CLAIM_ANALYSIS_EXTRACT ce
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ce.F_SC2_Policy_No = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) rmax on ce.F_SC2_Policy_No = rmax.riskextref

inner join risk r2 on ce.F_SC2_Policy_No = r2.riskextref and rmax.max_id_risk = r2.id_risk

where 1=1
and ce.rw_result_code_1 in ('036')
and not(ce.F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,14,2) between '01' and '99'
and substring(ce.F_SC2_Policy_No,13,1) = '/' 
and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and r1.No_of_Risks > 1
and '20'+substring(ce.F_SC2_Policy_No,14,2) = cast(year(r2.coverstart) as varchar(4))
		
union all
--26 - 2
select 
--top 100
'14' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_result_code_1,
substring(ce.F_SC2_Policy_No,15,2) as YY2,
r2.riskextref, r2.riskid,
substring(r2.riskid,10,2) as riskid_YY,
year(r2.coverstart) as Inc_YY, year(r2.expirydate) as Exp_YY,
'20'+substring(ce.F_SC2_Policy_No,15,2) as Policy_No_Year, cast(year(r2.coverstart) as varchar(4)) as rmax_Year_Start

from CLAIM_ANALYSIS_EXTRACT ce
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ce.F_SC2_Policy_No = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) rmax on ce.F_SC2_Policy_No = rmax.riskextref

inner join risk r2 on ce.F_SC2_Policy_No = r2.riskextref and rmax.max_id_risk = r2.id_risk
where 1=1
and ce.rw_result_code_1 in ('036')
and not(ce.F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,15,2) between '01' and '99'
--and substring(ce.F_SC2_Policy_No,14,1) = '/' 
--and not(substring(ce.F_SC2_Policy_No,10,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
--and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and r1.No_of_Risks > 1
and '20'+substring(ce.F_SC2_Policy_No,15,2) = cast(year(r2.coverstart) as varchar(4))
		
union all
--26 - 3
select 
--top 100
'09' as Offset, ce.F_INCIDENT_NUMBER, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_result_code_1,
substring(ce.F_SC2_Policy_No,10,2) as YY2,
r2.riskextref, r2.riskid,
substring(r2.riskid,10,2) as riskid_YY,
year(r2.coverstart) as Inc_YY, year(r2.expirydate) as Exp_YY,
'20'+substring(ce.F_SC2_Policy_No,10,2) as Policy_No_Year, cast(year(r2.coverstart) as varchar(4)) as rmax_Year_Start

from CLAIM_ANALYSIS_EXTRACT ce
inner join (select riskextref, count(*) as No_of_Risks
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref) r1 on ce.F_SC2_Policy_No = r1.riskextref

inner join (select riskextref, year(coverstart) as Year_Start, max(id_risk) as max_id_risk 
			from risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskextref, year(coverstart)) rmax on ce.F_SC2_Policy_No = rmax.riskextref

inner join risk r2 on ce.F_SC2_Policy_No = r2.riskextref and rmax.max_id_risk = r2.id_risk
where 1=1
and ce.rw_result_code_1 in ('036')
and not(ce.F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%') 
and substring(ce.F_SC2_Policy_No,10,2) between '01' and '99'
--and substring(ce.F_SC2_Policy_No,14,1) = '/' 
--and not(substring(ce.F_SC2_Policy_No,11,3) like '%/%') 
and not(substring(ce.F_SC2_Policy_No,10,3) is NULL) 
and substring(ce.F_SC2_Policy_No,10,3) like '%[^A-Z]%'
and r1.No_of_Risks > 1
and '20'+substring(ce.F_SC2_Policy_No,10,2) = cast(year(r2.coverstart) as varchar(4))

--select * from #update_claim_temp_26
PRINT '';PRINT 'Update Claim Extract table with ft_26'

update CLAIM_ANALYSIS_EXTRACT
	set [ft_26_pol_no_with_multi_risks_riskextref] = ct26.F_SC2_Policy_No,
		[assoc_26_riskid] = ct26.riskid
--select distinct ct26.* 
from #update_claim_temp_26 ct26
inner join CLAIM_ANALYSIS_EXTRACT ce on ct26.F_INCIDENT_NUMBER = ce.F_INCIDENT_NUMBER

--*/

-- ************************************************************************
-- Extract Table Field Clean Up - Remove special characters like LF and CR 
-- ************************************************************************

PRINT '';PRINT 'Extract Table Field Clean Up - Remove special characters like LF and CR'

--/*
PRINT '';PRINT 'Remove specialcharacters'
--DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters'
--DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


PRINT '';PRINT 'Remove specialcharacters again'
--DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters again'
--DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters again'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')

--*/

-- **************************************************************************************************
-- FigTree Policy No. Clean Up for result code 37, 38, 39 - Remove special characters ESCAPE and CR 
-- **************************************************************************************************

PRINT ''; PRINT 'FigTree Policy No. Clean Up for result code 37, 38, 39 - Remove special characters like ESC from END of Poicy No'

update CLAIM_ANALYSIS_EXTRACT
	set F_SC2_Policy_No = a.New_Policy_No
--select distinct a.* 
from CLAIM_ANALYSIS_EXTRACT ce
inner join
(select 
F_INCIDENT_NUMBER,
rw_result_code_1,
F_SC2_Policy_No, 
right(F_SC2_Policy_No,3) as RIGHT3, 
substring(F_SC2_Policy_No,17,1) as ONE,
substring(F_SC2_Policy_No,18,1) as TWO,
substring(F_SC2_Policy_No,19,1) as THREE,
substring(F_SC2_Policy_No,20,1) as FOUR,
left(F_SC2_Policy_No,16)+substring(F_SC2_Policy_No,17,1)+'-'+substring(F_SC2_Policy_No,19,1) as New_Policy_No
from CLAIM_ANALYSIS_EXTRACT
where 1=1
AND F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
AND substring(F_SC2_Policy_No,17,1) in ('E','F','G','H','I','J')
union all
select 
F_INCIDENT_NUMBER,
rw_result_code_1,
F_SC2_Policy_No, 
right(F_SC2_Policy_No,3) as RIGHT3, 
substring(F_SC2_Policy_No,17,1) as ONE,
substring(F_SC2_Policy_No,18,1) as TWO,
substring(F_SC2_Policy_No,19,1) as THREE,
substring(F_SC2_Policy_No,20,1) as FOUR,
left(F_SC2_Policy_No,17)+substring(F_SC2_Policy_No,18,1)+'-'+substring(F_SC2_Policy_No,20,1) as New_Policy_No
from CLAIM_ANALYSIS_EXTRACT 
where 1=1
AND F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
AND substring(F_SC2_Policy_No,18,1) in ('E','F','G','H','I','J')) a on ce.F_INCIDENT_NUMBER = a.F_INCIDENT_NUMBER

PRINT ''; PRINT 'FigTree Policy No. Clean Up for result code 37, 38, 39 - Remove special characters like ESC from BEGINNING of Poicy No'

update CLAIM_ANALYSIS_EXTRACT
	set F_SC2_Policy_No = a.New_Policy_No
--select distinct a.* 
from CLAIM_ANALYSIS_EXTRACT ce
inner join
(select 
F_INCIDENT_NUMBER,
rw_result_code_1,
F_SC2_Policy_No, 
right(F_SC2_Policy_No,3) as RIGHT3, 
left(F_SC2_Policy_No,1) as ONE,
substring(F_SC2_Policy_No,2,1) as TWO,
substring(F_SC2_Policy_No,3,1) as THREE,
substring(F_SC2_Policy_No,4,1) as FOUR,
left(F_SC2_Policy_No,1)+'-'+substring(F_SC2_Policy_No,3,25) as New_Policy_No
from CLAIM_ANALYSIS_EXTRACT
where 1=1
AND F_SC2_Policy_No like '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'
AND left(F_SC2_Policy_No,1) in ('P')) a on ce.F_INCIDENT_NUMBER = a.F_INCIDENT_NUMBER


-- Direct FigTree fields to RiskWrite after cleanup

PRINT '';PRINT 'Populate the extract file RiskWrite fields based on matching with raw FigTree data after they have been cleaned up by removal of special characters'

update [CLAIM_ANALYSIS_EXTRACT]
set
-- Direct FigTree fields to RiskWrite after Policy No. and Pivotal Policy Clean Up
--select 
--17
ft_17_pol_no_to_riskextref_cleanup_riskextref = ft_pol_no_to_riskextref.riskextref,
assoc_17_riskid = ft_pol_no_to_riskextref.riskid,
--18
ft_18_piv_pol_to_riskid_cleanup_riskid = ft_piv_pol_to_riskextref.riskid,
assoc_18_riskextref = ft_piv_pol_to_riskextref.riskextref
--select ce.F_INCIDENT_NUMBER, ce.F_Claim_Status, ce.F_SC2_Policy_No, ce.overall_match_rating, ce.rw_result_code_1, ce.rw_result_1
from [CLAIM_ANALYSIS_EXTRACT] ce
-- Direct FigTree fields to RiskWrite after cleanup
--17
left join risk ft_pol_no_to_riskextref on ltrim(rtrim(ce.F_SC2_Policy_No)) = ft_pol_no_to_riskextref.riskextref and not(ft_pol_no_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
--18
left join risk ft_piv_pol_to_riskextref on ltrim(rtrim(ce.F_SC13_Pivotal_Pol_RW_RISKID)) = ft_piv_pol_to_riskextref.riskextref and not(ft_piv_pol_to_riskextref.riskstatus in ('NTU','WIP','QUOT'))
where 1=1
and ce.rw_result_code_1 in ('037','038','039')


PRINT ''; PRINT 'For Result Codes 40,50,60 (No match on Policy No), populate the extract file RiskWrite fields'
PRINT 'based on matching FigTree Policy No. to Riskwrite Risk Description'
--19
update CLAIM_ANALYSIS_EXTRACT
	set 
--select
		[ft_19_pol_no_to_riskdescription_riskextref] = r2.riskextref,
		[assoc_19_riskid] = r2.riskid
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, r2.riskextref, r2.riskid, r2.riskdescription, r2.umr
--select distinct rw_result_code_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join (select riskdescription, count(*) as No_of_Risks 
			from risk 
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskdescription) r1 on r1.riskdescription = ce.F_SC2_Policy_No
inner join risk r2 on r2.riskdescription = ce.F_SC2_Policy_No
where 1=1
and r1.No_of_Risks = 1
and ce.rw_result_code_1 in ('040','050','060')

PRINT ''; PRINT 'For Result Code 40,50,60 (No match on Policy No), populate the extract file RiskWrite fields'
PRINT 'based on matching FigTree Policy No. to Riskwrite UMR field'
--20
update CLAIM_ANALYSIS_EXTRACT
	set 
--select
		[ft_20_pol_no_to_umr_riskextref] = r2.riskextref,
		[assoc_20_riskid] = r2.riskid
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, r2.riskextref, r2.riskid, r2.riskdescription, r2.umr
--select distinct rw_result_code_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join (select umr, count(*) as No_of_Risks 			
			from risk 
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by umr) r1 on r1.umr = ce.F_SC2_Policy_No
inner join risk r2 on r2.umr = ce.F_SC2_Policy_No
where 1=1
and r1.No_of_Risks = 1
and ce.rw_result_code_1 in ('040','050','060')

PRINT ''; PRINT 'For Result Codes 30,36,37,38,39,50,60 (Partial or No matches),, populate the extract file RiskWrite fields'
PRINT 'based on matching FigTree Pivotal Policy to Riskwrite Risk Description'
--21
update CLAIM_ANALYSIS_EXTRACT
	set 
--select
		[ft_21_piv_pol_to_riskdescription_riskid] = r2.riskid,
		[assoc_21_riskextref] = r2.riskextref
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, r2.riskextref, r2.riskid, r2.riskdescription, r2.umr
--select distinct rw_result_code_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join (select riskdescription, count(*) as No_of_Risks 
			from risk 
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by riskdescription) r1 on r1.riskdescription = ce.F_SC13_Pivotal_Pol_RW_RISKID
inner join risk r2 on r2.riskdescription = ce.F_SC13_Pivotal_Pol_RW_RISKID
where 1=1
and r1.No_of_Risks = 1
and rw_result_code_1 in ('020','030','036','037','038','039','050','060')

PRINT ''; PRINT 'For Result Codes 30,36,37,38,39,50,60 (Partial or No matches), populate the extract file RiskWrite fields'
PRINT 'based on matching FigTree Pivotal Policy to Riskwrite UMR field'
--22
update CLAIM_ANALYSIS_EXTRACT
	set 
--select
		[ft_22_piv_pol_to_umr_riskid] = r2.riskid,
		[assoc_22_riskextref] = r2.riskextref
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, r2.riskextref, r2.riskid, r2.riskdescription, r2.umr
--select distinct rw_result_code_1
from CLAIM_ANALYSIS_EXTRACT ce
inner join (select umr, count(*) as No_of_Risks 			
			from risk 
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by umr) r1 on r1.umr = ce.F_SC13_Pivotal_Pol_RW_RISKID
inner join risk r2 on r2.umr = ce.F_SC13_Pivotal_Pol_RW_RISKID
where 1=1
and r1.No_of_Risks = 1
and rw_result_code_1 in ('020','030','036','037','038','039','050','060')

-- Cleaning up ft_02_riskid for Result Code 036

PRINT ''; PRINT 'For Result Code 036, clean up ft_02_riskid with non-null value in ft_26_riskid for Result Code 036'

update CLAIM_ANALYSIS_EXTRACT
	set assoc_02_riskid = ce.assoc_26_riskid
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_riskextref, ce.rw_riskid, ce.ft_02_pol_no_to_riskextref_riskextref, ce.assoc_02_riskid, ce.ft_26_pol_no_with_multi_risks_riskextref, ce.assoc_26_riskid
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and ce.rw_result_code_1 = '036'
and ce.F_SC2_Policy_No = ce.ft_26_pol_no_with_multi_risks_riskextref

PRINT ''; PRINT 'For Result Code 036, clean up specific claims - Jangho'

update CLAIM_ANALYSIS_EXTRACT
	set 
--select	
	assoc_02_riskid = ce.ft_04_pol_no_to_riskid_riskid,
	ft_02_pol_no_to_riskextref_riskextref = assoc_04_riskextref

--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_riskextref, ce.rw_riskid, ce.ft_02_pol_no_to_riskextref_riskextref, ce.assoc_02_riskid, ce.ft_26_pol_no_with_multi_risks_riskextref, ce.assoc_26_riskid
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and ce.rw_result_code_1 = '036'
and ce.F_INCIDENT_NUMBER = '2016C0007791'

PRINT ''; PRINT 'For Result Code 036, clean up specific claims - CT Freight Pty Ltd'

update CLAIM_ANALYSIS_EXTRACT
	set 
--select	
	assoc_02_riskid = ce.bo_35_match_claim_policy_partial_to_riskid_riskid,
	ft_02_pol_no_to_riskextref_riskextref = assoc_35_riskextref
--select ce.F_INCIDENT_NUMBER, ce.rw_result_code_1, ce.F_SC2_Policy_No, ce.F_SC13_Pivotal_Pol_RW_RISKID, ce.rw_riskextref, ce.rw_riskid, ce.ft_02_pol_no_to_riskextref_riskextref, ce.assoc_02_riskid, ce.ft_26_pol_no_with_multi_risks_riskextref, ce.assoc_26_riskid
from CLAIM_ANALYSIS_EXTRACT ce
where 1=1
and ce.rw_result_code_1 = '036'
and ce.F_INCIDENT_NUMBER = '2017C0008892'


-- Update alternate method match flags

PRINT ''; PRINT 'Set flag in Claim Extract table to show where matching has occurred from Figtree to RiskWrite using alternate methods'

update CLAIM_ANALYSIS_EXTRACT
	set
--select 
	[match_to_riskwrite_with_alternate_methods] = case when 

		(	[ft_03_piv_pol_to_riskextref_riskextref] is NOT NULL
		or	[ft_04_pol_no_to_riskid_riskid] is NOT NULL
		--or	[ft_05_piv_pol_to_riskid_riskid] is NOT NULL
		or	[ft_06_match_to_riskextref_masked_and_riskid_riskextref] is NOT NULL
		or	[ft_07_pol_no_to_riskextref_masked_riskextref] is NOT NULL
		or	[ft_08_piv_pol_to_riskextref_masked_riskextref] is NOT NULL
		or	[ft_09_pol_no_to_riskid_masked_riskid] is NOT NULL
		or	[ft_10_piv_pol_to_riskid_masked_riskid] is NOT NULL
		or	[ft_11_match_to_riskextref_partial_and_riskid_riskextref] is NOT NULL
		or	[ft_12_pol_no_to_riskextref_partial_riskextref] is NOT NULL
		or	[ft_13_piv_pol_to_riskextref_partial_riskextref] is NOT NULL
		or	[ft_14_pol_no_to_riskid_partial_riskid] is NOT NULL
		or	[ft_15_piv_pol_to_riskid_partial_riskid] is NOT NULL
		or	[ft_16_pol_no_to_riskextref_subs_seqno_with_000] is NOT NULL
		or	[ft_17_pol_no_to_riskextref_cleanup_riskextref] is NOT NULL
		or	[ft_18_piv_pol_to_riskid_cleanup_riskid] is NOT NULL
		or	[ft_19_pol_no_to_riskdescription_riskextref] is NOT NULL
		or	[ft_20_pol_no_to_umr_riskextref] is NOT NULL
		or	[ft_21_piv_pol_to_riskdescription_riskid] is NOT NULL
		or	[ft_22_piv_pol_to_umr_riskid] is NOT NULL
		or	[ft_23_pol_no_to_subs_seqno_with_001_riskextref] is NOT NULL
		or	[ft_24_pol_no_to_subs_seqno_with_002_riskextref] is NOT NULL
		or	[ft_25_pol_no_to_subs_seqno_with_003_riskextref] is NOT NULL
		or	[ft_26_pol_no_with_multi_risks_riskextref] is NOT NULL	)
			
				then 'Yes'
				else 'No' end

from CLAIM_ANALYSIS_EXTRACT
where 1=1
and rw_result_code_1 in ('020','030','033','036','037','038','039','050','060','070','090','140','150')
				

PRINT ''; PRINT 'Set flag in Claim Extract table to show where matching has occurred from Figtree to BO to RW using alternate methods'

update CLAIM_ANALYSIS_EXTRACT
	set
--select 
	[match_to_bo_claim_and_riskwrite_with_alternate_methods] = case when 

		(	[bo_30_match_claim_policy_to_riskextref_riskextref] is NOT NULL
		or  [bo_31_match_claim_policy_to_riskid_riskid] is NOT NULL
		or  [bo_32_match_claim_policy_masked_to_riskextref_riskextref] is NOT NULL
		or  [bo_33_match_claim_policy_masked_to_riskid_riskid] is NOT NULL
		or  [bo_34_match_claim_policy_partial_to_riskextref_riskextref] is NOT NULL
		or  [bo_35_match_claim_policy_partial_to_riskid_riskid] is NOT NULL
		or  [bo_36_match_claim_EVO_policy_to_riskextref_riskextref] is NOT NULL
		or  [bo_37_match_claim_EVO_policy_to_riskid_riskid] is NOT NULL
		or  [bo_38_match_claim_EVO_policy_masked_to_riskextref_riskextref] is NOT NULL
		or  [bo_39_match_claim_EVO_policy_masked_to_riskid_riskid] is NOT NULL
		or  [bo_40_match_claim_EVO_policy_partial_to_riskextref_riskextref] is NOT NULL
		or  [bo_41_match_claim_EVO_policy_partial_to_riskid_riskid] is NOT NULL	)

				then 'Yes'
				else 'No' end

from CLAIM_ANALYSIS_EXTRACT
where 1=1
and rw_result_code_1 in ('020','030','033','036','037','038','039','040','050','060','070','090','140','150')
							

-- Now that alternate matching techniques have been executed, update the Overall Match Rating if the Claim can find a valid RiskID

if OBJECT_ID('tempdb..##claim_index') is not null drop table ##claim_index

PRINT ''; PRINT 'Create Claim Index temp table using COALESCE function'

select 

F_INCIDENT_NUMBER, F_SC2_Policy_No, F_SC13_Pivotal_Pol_RW_RISKID, rw_result_code_1,
[F_SC6_Insured_Name], rw_insured_name, rw_insured_name_match, 
coalesce(
[ft_01_match_to_riskextref_and_riskid_riskextref],
[ft_02_pol_no_to_riskextref_riskextref],
[ft_03_piv_pol_to_riskextref_riskextref],
[assoc_04_riskextref],
[assoc_05_riskextref],
[ft_07_pol_no_to_riskextref_masked_riskextref],
[assoc_14_riskextref],
[assoc_15_riskextref],
[ft_16_pol_no_to_riskextref_subs_seqno_with_000],
[ft_17_pol_no_to_riskextref_cleanup_riskextref],
[ft_19_pol_no_to_riskdescription_riskextref],
[ft_20_pol_no_to_umr_riskextref],
[ft_23_pol_no_to_subs_seqno_with_001_riskextref],
[ft_24_pol_no_to_subs_seqno_with_002_riskextref],
[ft_26_pol_no_with_multi_risks_riskextref],
[bo_30_match_claim_policy_to_riskextref_riskextref],
[assoc_35_riskextref],
[bo_36_match_claim_EVO_policy_to_riskextref_riskextref]) as RISKEXTREF,

coalesce (
[assoc_01_riskid],
[assoc_02_riskid],
[assoc_03_riskid],
[ft_04_pol_no_to_riskid_riskid],
[ft_05_piv_pol_to_riskid_riskid],
[assoc_07_riskid],
[ft_14_pol_no_to_riskid_partial_riskid],
[ft_15_piv_pol_to_riskid_partial_riskid],
[assoc_16_riskid],
[assoc_17_riskid],
[assoc_19_riskid],
[assoc_20_riskid],
[assoc_23_riskid],
[assoc_24_riskid],
[assoc_26_riskid],
[assoc_30_riskid],
[bo_35_match_claim_policy_partial_to_riskid_riskid],
[assoc_36_riskid]) as RISKID 

into ##claim_index
FROM [dbo].[CLAIM_ANALYSIS_EXTRACT]
where 1=1
and not(rw_result_code_1 in ('100','110')) 


PRINT '';PRINT 'Update Claim Extract with info after getting RiskID from alternate methods'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set alt_rw_riskextref = r.riskextref,
		alt_rw_riskid = r.riskid,
		alt_rw_insured_name = left(c.clientname,100),
		alt_rw_inception_date = r.coverstart,
		alt_rw_expiry_date = r.coverend,
		alt_rw_risk_status = r.riskstatus,
		alt_rw_risk_type = r.risktype,
		alt_rw_product_id = r.productid,
		alt_bo_company_name = bd.COMPANY_NA,
		resolved_riskextref = ci.riskextref,
		resolved_riskid = ci.riskid
--select cae.*
from Claim_Analysis_Extract cae
inner join ##claim_index ci on cae.F_INCIDENT_NUMBER = ci.F_INCIDENT_NUMBER
inner join risk r on ci.RISKID = r.riskid
inner join client c on r.id_clnt = c.id_clnt
left join BO_DUALCLAIM bc on cae.F_INCIDENT_NUMBER = bc.FTCLMNUMBE
left join BO_DUALDATA bd on bc.POLICY_NUM = bd.POLICY__
where 1=1
--and (isnull(cae.rw_riskid,'') = '' or ltrim(isnull(cae.F_SC13_Pivotal_Pol_RW_RISKID,'')) = '' or cae.rw_result_code_1 in ('030','040'))


PRINT '';PRINT 'RiskWrite Last Pass Update Name Match 25'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set riskwrite_match_rating = cae.riskwrite_match_rating+2,
		alt_rw_bo_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
and not(isnull(cae.alt_rw_riskid,'') = '')
and not(isnull(cae.alt_rw_insured_name,'') = '')
--Check Client/Insured names 
and (replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_rw_insured_name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
	or 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_bo_company_name)),25),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', ''''''))

PRINT '';PRINT 'RiskWrite Last Pass Update Name Match 20'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set riskwrite_match_rating = cae.riskwrite_match_rating+2,
		alt_rw_bo_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
and not(isnull(cae.alt_rw_riskid,'') = '')
and not(isnull(cae.alt_rw_insured_name,'') = '')
--Check Client/Insured names 
and (replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_rw_insured_name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
	or 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_bo_company_name)),20),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', ''''''))
and alt_rw_bo_insured_name_match = 'No'

PRINT '';PRINT 'RiskWrite Last Pass Update Name Match 15'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set riskwrite_match_rating = cae.riskwrite_match_rating+2,
		alt_rw_bo_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
and not(isnull(cae.alt_rw_riskid,'') = '')
and not(isnull(cae.alt_rw_insured_name,'') = '')
--Check Client/Insured names 
and (replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_rw_insured_name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
	or 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_bo_company_name)),15),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', ''''''))
and alt_rw_bo_insured_name_match = 'No'


PRINT '';PRINT 'RiskWrite Last Pass Update Name Match 10'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set riskwrite_match_rating = cae.riskwrite_match_rating+2,
		alt_rw_bo_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
and not(isnull(cae.alt_rw_riskid,'') = '')
and not(isnull(cae.alt_rw_insured_name,'') = '')
--Check Client/Insured names 
and (replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_rw_insured_name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
	or 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_bo_company_name)),10),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', ''''''))
and alt_rw_bo_insured_name_match = 'No'

PRINT '';PRINT 'RiskWrite Last Pass Update Name Match 8'

--Check to see if the Claim Insured Name matches to the UW record it is attached to for the RISKEXTREF match
update Claim_Analysis_Extract
	set riskwrite_match_rating = cae.riskwrite_match_rating+2,
		alt_rw_bo_insured_name_match = 'Yes'
--select cae.*
from Claim_Analysis_Extract cae
where 1=1
and not(isnull(cae.alt_rw_riskid,'') = '')
and not(isnull(cae.alt_rw_insured_name,'') = '')
--Check Client/Insured names 
and (replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_rw_insured_name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''')
	or 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.F_SC6_Insured_Name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', '''''') = 
	replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(ltrim(rtrim(cae.alt_bo_company_name)),8),'&',''),'.',''),'/',''),',',''),'-',''),'_',''),'+',''),';',''),'',''),'(',''),')',''),'DUP',''),'The ',''),'''', ''''''))
and alt_rw_bo_insured_name_match = 'No'

update [CLAIM_ANALYSIS_EXTRACT]
	set riskwrite_match_rating = riskwrite_match_rating + 8
--select *
from [CLAIM_ANALYSIS_EXTRACT]
where 1=1
and resolved_riskid is NOT NULL


-- ************************************************************************
-- Extract Table Field Clean Up - Remove special characters like LF and CR 
-- ************************************************************************

PRINT '';PRINT 'Extract Table Field Clean Up - 3 - Remove special characters like LF and CR'

--/*
PRINT '';PRINT 'Remove specialcharacters - last time'
--DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters - last time'
--DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters - last time'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


PRINT '';PRINT 'Remove specialcharacters  - last time again'
--DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters  - last time again'
--DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove Reserved word characters  - last time again'
update CLAIM_ANALYSIS_EXTRACT
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')



PRINT '';PRINT 'Finish up, add up and update the Overall Rating'


-- *********************************************
-- END RISKWRITE EXTRA CHECKING ANALYSIS
-- *********************************************

-- Finish up and add up the Ratings

update CLAIM_ANALYSIS_EXTRACT
	set overall_match_rating = riskwrite_match_rating + wr_match_rating + bo_match_rating



-- Finish off update of Claim Anlaysis Extract table with an update of the Recommendation and some Name clean-up

PRINT '';PRINT 'Update Overall Recommendation'

update Claim_Analysis_Extract 
	set overall_recommendation = case	when rw_result_code_1 in ('140','150') then 'Review Active Claim for status validity as RiskWrite Risk is not Active'
										when overall_match_rating > 7 then 'Claim does not require attention in FIGTREE' 
										when overall_match_rating < 8 then 'Claim should be updated in FIGTREE with the correct Policy and/or Pivotal Policy' end


-- ************************************************************************
-- END CLAIM ANALYSIS EXTRACT
-- ************************************************************************

PRINT '';PRINT 'END CLAIM ANALYSIS EXTRACT'

--/*


-- *******************************************************************************************
-- * GCF020 UPDATE *** GCF020 UPDATE *** GCF020 UPDATE *** GCF020 UPDATE *** GCF020 UPDATE *** 
-- *******************************************************************************************


--Cleanup GCF020 table
PRINT '';PRINT 'Remove special characters from GCF020'

update GCF020_DATA
	set [F_SPARE_CHAR_2] = Replace(REPLACE([F_SPARE_CHAR_2], SUBSTRING([F_SPARE_CHAR_2], PATINDEX( @specialchars, [F_SPARE_CHAR_2] ), 1 ),''),'-','-'),
		[F_SPARE_CHAR_13] = Replace(REPLACE([F_SPARE_CHAR_13], SUBSTRING([F_SPARE_CHAR_13], PATINDEX( @specialchars, [F_SPARE_CHAR_13] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters from GCF020'

update GCF020_DATA
	set [F_SPARE_CHAR_2] = Replace(REPLACE([F_SPARE_CHAR_2], SUBSTRING([F_SPARE_CHAR_2], PATINDEX( @dodgychars, [F_SPARE_CHAR_2] ), 1 ),''),'-','-'),
		[F_SPARE_CHAR_13] = Replace(REPLACE([F_SPARE_CHAR_13], SUBSTRING([F_SPARE_CHAR_13], PATINDEX( @dodgychars, [F_SPARE_CHAR_13] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove Reserved word characters from GCF020'
update GCF020_DATA
	set [F_SPARE_CHAR_2] = REPLACE(REPLACE(REPLACE([F_SPARE_CHAR_2], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SPARE_CHAR_13] = REPLACE(REPLACE(REPLACE([F_SPARE_CHAR_13], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


--Cleanup GCF020 table
PRINT '';PRINT 'Remove special characters from GCF020 again'

update GCF020_DATA
	set [F_SPARE_CHAR_2] = Replace(REPLACE([F_SPARE_CHAR_2], SUBSTRING([F_SPARE_CHAR_2], PATINDEX( @specialchars, [F_SPARE_CHAR_2] ), 1 ),''),'-','-'),
		[F_SPARE_CHAR_13] = Replace(REPLACE([F_SPARE_CHAR_13], SUBSTRING([F_SPARE_CHAR_13], PATINDEX( @specialchars, [F_SPARE_CHAR_13] ), 1 ),''),'-','-')

PRINT '';PRINT 'Remove dodgy characters from GCF020 again'

update GCF020_DATA
	set [F_SPARE_CHAR_2] = Replace(REPLACE([F_SPARE_CHAR_2], SUBSTRING([F_SPARE_CHAR_2], PATINDEX( @dodgychars, [F_SPARE_CHAR_2] ), 1 ),''),'-','-'),
		[F_SPARE_CHAR_13] = Replace(REPLACE([F_SPARE_CHAR_13], SUBSTRING([F_SPARE_CHAR_13], PATINDEX( @dodgychars, [F_SPARE_CHAR_13] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove Reserved word characters from GCF020  again'
update GCF020_DATA
	set [F_SPARE_CHAR_2] = REPLACE(REPLACE(REPLACE([F_SPARE_CHAR_2], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SPARE_CHAR_13] = REPLACE(REPLACE(REPLACE([F_SPARE_CHAR_13], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')



PRINT ''; PRINT 'Copy CLAIM_EXTRACT_ANALYSIS table to AFTER update table - delete and insert rows affected'

-- Backup [CLAIM_ANALYSIS_EXTRACT_AFTER]
DELETE [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
insert into [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
select * from [dbo].[CLAIM_ANALYSIS_EXTRACT]


--*/

PRINT ''; PRINT 'Update Claim Extract table with Manual Fix Claim information into RESOLVED columns so that GCF020 table can be updated with other auto-fix Claims'

update CLAIM_ANALYSIS_EXTRACT
	set resolved_riskextref = ltrim(rtrim(New_F_SC2_Policy_No)),
		resolved_riskid = case when fcmf.Valid_New_Pivotal_Pol = 'Yes' then ltrim(rtrim(New_F_SC13_Pivotal_Pol_RW_RISKID)) else NULL end,
-- Special logic for a troublesome Claims
		rw_riskid_match = case when cae.F_INCIDENT_NUMBER in ('2016C0008385','2016C0008360','XXXXXXXXXXXX') then 'No' else cae.rw_riskid_match end
--select cae.F_INCIDENT_NUMBER, resolved_riskextref = New_F_SC2_Policy_No, resolved_riskid = case when fcmf.Valid_New_Pivotal_Pol = 'Yes' then New_F_SC13_Pivotal_Pol_RW_RISKID else NULL end, cae.rw_riskid_match, rw_riskid_match = case when cae.F_INCIDENT_NUMBER in ('2016C0008385','2016C0008360') then 'No' else cae.rw_riskid_match end, fcmf.*, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.rw_result_code_1
from CLAIM_ANALYSIS_EXTRACT cae
inner join FIGTREE_CLAIMS_MANUAL_FIX fcmf on cae.F_INCIDENT_NUMBER = fcmf.F_INCIDENT_NUMBER
where 1=1


PRINT ''; PRINT 'Update GCF020 table with new Riskid'

update  [dbo].[GCF020_DATA]
	set F_SPARE_CHAR_13 = ltrim(rtrim(cae.resolved_riskid))
--select cae.F_INCIDENT_NUMBER, cae.rw_result_code_1, cae.F_SC2_Policy_No, cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.rw_riskextref, cae.rw_riskid, cae.resolved_riskextref, cae.resolved_riskid
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae
inner join [dbo].[GCF020_DATA] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER
where 1=1
and cae.resolved_riskid is NOT NULL
and cae.rw_riskid_match = 'No'


PRINT ''; PRINT 'Update GCF020 table with RiskExtRef if RiskID is in RiskExtRef'

update  [dbo].[GCF020_DATA]
	set 
--select cae.F_INCIDENT_NUMBER, cae.rw_result_code_1, cae.F_SC2_Policy_No, cae.resolved_riskextref, 
	F_SPARE_CHAR_2 =
	case 
		 --Special code for troublesome claims
		 when cae.F_INCIDENT_NUMBER in ('2018C0012143','XXXXXXXXXXX') then ltrim(rtrim(cae.resolved_riskextref))
		 --
		 when (ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 
					and ltrim(left(cae.F_SC2_Policy_No,12)) = ltrim(left(cae.resolved_riskextref,12)) then ltrim(rtrim(cae.resolved_riskextref))
-- Don't update the Claims Policy No. which has a WebRater Policy No.
		 when (ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 
					and ltrim(left(cae.F_SC2_Policy_No,12)) <> ltrim(left(cae.resolved_riskextref,12)) then ltrim(rtrim(cae.F_SC2_Policy_No))
		 else ltrim(rtrim(cae.resolved_riskextref)) end 
--cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.resolved_riskid, cae.rw_riskextref, cae.rw_riskid, cae.rw_riskextref_match
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae
inner join [dbo].[GCF020_DATA] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER
where 1=1
and cae.resolved_riskextref is NOT NULL
--and not(cae.rw_result_code_1 in ('100','110'))
and ltrim(rtrim(cae.resolved_riskextref)) <> ltrim(rtrim(cae.F_SC2_Policy_No))
-- Only update if RiskID found in resolved RiskExtRef
and cae.resolved_riskid in (select riskid from risk 
							where riskextref = 
								case 
									--Special code for a troublesome claim
									 when cae.F_INCIDENT_NUMBER in ('2018C0012143','XXXXXXXXXXX') then ltrim(rtrim(cae.resolved_riskextref))
									 --
									 when (ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 
													and ltrim(left(cae.F_SC2_Policy_No,12)) = ltrim(left(cae.resolved_riskextref,12)) then ltrim(rtrim(cae.resolved_riskextref))
									 when (ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 
													and ltrim(left(cae.F_SC2_Policy_No,12)) <> ltrim(left(cae.resolved_riskextref,12)) then ltrim(rtrim(cae.F_SC2_Policy_No))
									 else ltrim(rtrim(cae.resolved_riskextref)) end)


PRINT ''; PRINT 'Update GCF020 table where the Policy No. is corrupt'

update  [dbo].[GCF020_DATA]
	set 
--select cae.F_INCIDENT_NUMBER, cae.rw_result_code_1, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.resolved_riskid, r1.riskextref, r1.riskid,
	F_SPARE_CHAR_2 = ltrim(rtrim(cae.F_SC2_Policy_No))
--cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.resolved_riskid, cae.rw_riskextref, cae.rw_riskid, cae.rw_riskextref_match
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae
inner join [dbo].[GCF020_DATA] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER
left join risk r1 on ltrim(rtrim(cae.F_SC2_Policy_No)) = r1.riskextref
where 1=1
and cae.rw_result_code_1 in ('037','038')
and r1.riskextref is NULL
and (ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 


PRINT ''; PRINT 'Update GCF020 table for some difficult claims - 1'

update  [dbo].[GCF020_DATA]
	set 
--select cae.F_INCIDENT_NUMBER, cae.rw_result_code_1, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.resolved_riskid, r1.riskextref, r1.riskid,
	F_SPARE_CHAR_2 = ltrim(rtrim(cae.F_SC2_Policy_no))
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
where 1=1
and cae.F_INCIDENT_NUMBER in ('2016C0007446','2019C0015658','XXXXXXXXXXXX')


PRINT ''; PRINT 'Update GCF020 table for some difficult claims - 2'

update  [dbo].[GCF020_DATA]
	set 
--select cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.New_F_SC2_Policy_No,
	F_SPARE_CHAR_2 = ltrim(rtrim(cae.New_F_SC2_Policy_No))
from [dbo].[FIGTREE_CLAIMS_MANUAL_FIX] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
where 1=1
and cae.F_INCIDENT_NUMBER in ('2016C0007559','2015C0006076','2015C0007076','2015C0007243','2016C0007759','2016C0007998','2016C0008342','2016C0008475','2017C0010133','XXXXXXXXXXXX')

PRINT ''; PRINT 'Update GCF020 table for some difficult claims - 2'

update  [dbo].[GCF020_DATA]
	set 
--select cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.New_F_SC2_Policy_No,
	F_SPARE_CHAR_2 = ltrim(rtrim(cae.New_F_SC2_Policy_No)),
	F_SPARE_CHAR_13 = ltrim(rtrim(cae.New_F_SC13_Pivotal_Pol_RW_RISKID))
from [dbo].[FIGTREE_CLAIMS_MANUAL_FIX] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
where 1=1
and cae.F_INCIDENT_NUMBER in ('2018C0011837','2018C0011838','XXXXXXXXXXXX')


PRINT ''; PRINT 'Update GCF020_DATA table with new Riskid for some difficult claims'

update  GCF020_DATA
	set F_SPARE_CHAR_13 = ltrim(rtrim(cae.resolved_riskid))
--select cae.F_INCIDENT_NUMBER, cae.rw_result_code_1, cae.F_SC2_Policy_No, cae.F_SC13_Pivotal_Pol_RW_RISKID, cae.rw_riskextref, cae.rw_riskid, cae.resolved_riskextref, cae.resolved_riskid
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae
inner join GCF020_DATA fc on cae.F_INCIDENT_NUMBER = fc.F_INCIDENT_NUMBER
where 1=1
and cae.resolved_riskid is NOT NULL
and (cae.rw_riskid_match = 'No' 
		--Special code for a troublesome claim		
		or cae.F_INCIDENT_NUMBER in ('2016C0008385','XXXXXXXXXXXX'))


PRINT ''; PRINT 'Update GCF020 table for Claims that have a WebRater Policy No. which does not match the RiskWrite Broker Ref for the supplied Pivotal Policy which matches the RiskWrite Risk Ref'

update [GCF020_DATA]
	set F_SPARE_CHAR_2 = cae.resolved_riskextref
--select g20.F_INCIDENT_NUMBER, g20.F_SPARE_CHAR_2, F_SPARE_CHAR_2 = cae.resolved_riskextref, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.rw_result_code_1
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
where 1=1
and cae.rw_result_code_1 in ('040','050','060','100','110','150')
and ((ltrim(left(cae.F_SC2_Policy_No,2)) in ('P_','P-','P/') or ltrim(left(cae.F_SC2_Policy_No,3)) in ('PPI','PIT')) 
					and (ltrim(left(cae.resolved_riskextref,2)) in ('P_','P-','P/') or ltrim(left(cae.resolved_riskextref,2)) in ('P_','P-','P/')))
and ltrim(rtrim(cae.F_SC2_Policy_No)) <> ltrim(rtrim(cae.resolved_riskextref))
-- If it's a manual fix Claim, don't update it here, unless it's a specific Claim in the OR statement
and (g20.F_INCIDENT_NUMBER not in (select [F_INCIDENT_NUMBER] from [dbo].[FIGTREE_CLAIMS_MANUAL_FIX]) 
			or g20.F_INCIDENT_NUMBER in ('2015C0007249','2015C0006036','2015C0006393','2014C0003716','2015C0006771'))


PRINT ''; PRINT 'Update GCF020_DATA Policy No. for some outstanding Result Code 040s not catered for above'

update [dbo].[GCF020_DATA]
		set F_SPARE_CHAR_2 = cae.resolved_riskextref
--select cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, g20.*
FROM [dbo].[CLAIM_ANALYSIS_EXTRACT] cae
inner join [dbo].[GCF020_DATA] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER
where 1=1
and cae.rw_result_code_1 = '040'
and not(left(ltrim(cae.F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(cae.F_SC2_Policy_No),3) in ('PPI','PIT'))
and cae.F_SC13_Pivotal_Pol_RW_RISKID = cae.resolved_riskid
and not(cae.resolved_riskextref is NULL)
and cae.F_SC2_Policy_No <> cae.resolved_riskextref
-- Ignore 3 Claims with circular reference potential because of inconsistent data in RW and BO
and not(cae.F_INCIDENT_NUMBER in ('2016C0008994','2017C0008821','2017C0009684'))

/*
PRINT ''; PRINT 'Update CLAIM EXTRACT Policy No. for some outstanding Result Code 040s not catered for above'

update [dbo].[CLAIM_ANALYSIS_EXTRACT]
		set F_SC2_Policy_No = resolved_riskextref
--select F_INCIDENT_NUMBER, F_SC2_Policy_No, resolved_riskextref 
FROM [dbo].[CLAIM_ANALYSIS_EXTRACT]
where 1=1
and rw_result_code_1 = '040'
and not(left(ltrim(F_SC2_Policy_No),2) in ('P_','P-','P/'))
and not(left(ltrim(F_SC2_Policy_No),3) in ('PPI','PIT'))
and F_SC13_Pivotal_Pol_RW_RISKID = resolved_riskid
and not(resolved_riskextref is NULL)
and F_SC2_Policy_No <> resolved_riskextref
*/

PRINT ''; PRINT 'Update GCF020 table for Claims that are linked to Inactive BizCover type Policies - link them to a valid Risk via the Bordereau Schedule - based on matching Loss Date to Risk Dates'

update [GCF020_DATA]
	set F_SPARE_CHAR_13 = r2.riskid
--select g20.F_INCIDENT_NUMBER, g20.F_SPARE_CHAR_2, F_SPARE_CHAR_2 = cae.resolved_riskextref, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.rw_result_code_1, bc.[brokercompanyname], cae.F_ACCIDENT_DATE, F_SPARE_CHAR_13 = r2.riskid, r2.COVERSTART, R2.COVEREND, r2.riskstatus
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
inner join schedulerow sr on cae.F_SC2_Policy_No = sr.reference

inner join (select id_shed, max(coverstart) as coverstart, max(coverend) as coverend, max(r.id_risk) as id_risk 
			from scheduleheader sh
			inner join risk r on sh.id_risk = r.id_risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by id_shed) rmax on sr.id_shed = rmax.id_shed and cae.F_ACCIDENT_DATE between rmax.coverstart and rmax.coverend

inner join risk r2 on rmax.id_risk = r2.id_risk
inner join [dbo].[brokercompany] bc on r2.id_brkc = bc.id_brkc

where 1=1
and rw_result_code_1 in ('150','140')
and bc.[brokercompanyname] like '%bizcover%' 
--and cae.F_ACCIDENT_DATE between r2.coverstart and r2.coverend
--order by g20.F_INCIDENT_NUMBER

PRINT ''; PRINT 'Update CLAIM EXTRACT table result codes to 040 from 140 for Claims that are linked to Inactive BizCover type Policies - based on matching Loss Date to Risk Dates'

update [CLAIM_ANALYSIS_EXTRACT]
	set rw_result_code_1 = '041',
		overall_match_rating = overall_match_rating + 1
--select F_SPARE_CHAR_2 = cae.resolved_riskextref, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.rw_result_code_1, bc.[brokercompanyname], cae.F_ACCIDENT_DATE, F_SPARE_CHAR_13 = r2.riskid, r2.COVERSTART, R2.COVEREND, r2.riskstatus
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
--inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
inner join schedulerow sr on cae.F_SC2_Policy_No = sr.reference

inner join (select id_shed, max(coverstart) as coverstart, max(coverend) as coverend, max(r.id_risk) as id_risk 
			from scheduleheader sh
			inner join risk r on sh.id_risk = r.id_risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by id_shed) rmax on sr.id_shed = rmax.id_shed and cae.F_ACCIDENT_DATE between rmax.coverstart and rmax.coverend

inner join risk r2 on rmax.id_risk = r2.id_risk
inner join [dbo].[brokercompany] bc on r2.id_brkc = bc.id_brkc

where 1=1
and rw_result_code_1 in ('150','140')
and bc.[brokercompanyname] like '%bizcover%' 
and cae.F_ACCIDENT_DATE between r2.coverstart and r2.coverend
--order by cae.F_INCIDENT_NUMBER


PRINT ''; PRINT 'Update GCF020 table for Claims that are linked to Inactive BizCover type Policies - link them to a valid Risk via the Bordereau Schedule - based on matching Policy Year to Risk UW Year'

update [GCF020_DATA]
	set F_SPARE_CHAR_13 = r2.riskid
--select g20.F_INCIDENT_NUMBER, g20.F_SPARE_CHAR_2, F_SPARE_CHAR_2 = cae.resolved_riskextref, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.rw_result_code_1
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join [dbo].[GCF020_DATA] g20 on g20.F_INCIDENT_NUMBER = cae.F_INCIDENT_NUMBER
inner join schedulerow sr on cae.F_SC2_Policy_No = sr.reference

inner join (select id_shed, year(coverstart) as Year_Start, max(r.id_risk) as id_risk 
			from scheduleheader sh
			inner join risk r on sh.id_risk = r.id_risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by id_shed, year(coverstart)) rmax on sr.id_shed = rmax.id_shed

inner join risk r2 on rmax.id_risk = r2.id_risk
inner join [dbo].[brokercompany] bc on r2.id_brkc = bc.id_brkc

where 1=1
and rw_result_code_1 in ('150','140')
and bc.[brokercompanyname] like '%bizcover%' 
and '20'+substring([F_SC2_Policy_No],15,2) = cast(year(r2.coverstart) as varchar(4))
--order by g20.F_INCIDENT_NUMBER


PRINT ''; PRINT 'Update CLAIM EXTRACT table result codes to 040 from 140 for Claims that are linked to Inactive BizCover type Policies - based on matching Loss Date to Risk Dates'

update [CLAIM_ANALYSIS_EXTRACT]
	set rw_result_code_1 = '041',
		overall_match_rating = overall_match_rating + 1
--select F_SPARE_CHAR_2 = cae.resolved_riskextref, cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.resolved_riskextref, cae.rw_result_code_1, bc.[brokercompanyname], cae.F_ACCIDENT_DATE, F_SPARE_CHAR_13 = r2.riskid, r2.COVERSTART, R2.COVEREND, r2.riskstatus
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join schedulerow sr on cae.F_SC2_Policy_No = sr.reference

inner join (select id_shed, year(coverstart) as Year_Start, max(r.id_risk) as id_risk 
			from scheduleheader sh
			inner join risk r on sh.id_risk = r.id_risk
			where 1=1
			and not(riskstatus in ('NTU','WIP','QUOT'))
			group by id_shed, year(coverstart)) rmax on sr.id_shed = rmax.id_shed

inner join risk r2 on rmax.id_risk = r2.id_risk
inner join [dbo].[brokercompany] bc on r2.id_brkc = bc.id_brkc

where 1=1
and rw_result_code_1 in ('150','140')
and bc.[brokercompanyname] like '%bizcover%' 
and '20'+substring([F_SC2_Policy_No],15,2) = cast(year(r2.coverstart) as varchar(4))


PRINT ''; PRINT 'Update CLAIM ANALYSIS EXTRACT to get Insured name for BizCover Risks'

update [CLAIM_ANALYSIS_EXTRACT]
	set alt_rw_insured_name = sa.answertext1,
		alt_rw_bo_insured_name_match = 'Yes'
--select distinct cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, cae.F_SC13_Pivotal_Pol_rw_RISKID,cae.resolved_riskextref,sa.answertext1, sa.bookmarkid,cae.F_SC6_Insured_Name,cae.rw_result_code_1,cae.alt_rw_riskid,cae.alt_rw_insured_name,cae.rw_insured_name_match, cae.rw_insured_name,cae.bo_insured_name_match, cae.alt_rw_bo_insured_name_match,cae.alt_rw_insured_name,cae.alt_bo_company_name,cae.bo_company_na
from [dbo].[CLAIM_ANALYSIS_EXTRACT] cae 
inner join [dbo].[schedulerow] sr on sr.reference = case when cae.resolved_riskextref is NOT NULL then cae.resolved_riskextref
														 when left(cae.F_SC2_Policy_No,3) = 'SOB' 
																and 'S0B'+substring(cae.F_SC2_Policy_No,4,37) in (select distinct riskextref from risk)
																	then 'S0B'+substring(cae.F_SC2_Policy_No,4,37)
														 else cae.F_SC2_Policy_No end
				
inner join [dbo].[scheduleanswer] sa on sr.id_srow = sa.id_srow
where 1=1
--and (cae.rw_insured_name_match = 'No' and cae.alt_rw_bo_insured_name_match = 'No' and cae.bo_insured_name_match = 'No')
and cae.rw_insured_name like '%bizcover%'
and sa.bookmarkid in ('Q_SCH02','XXXXXX')


PRINT ''; PRINT 'Update GCF020_DATA to remove leading spaces on Policy No.'

update GCF020_DATA
	set F_SPARE_CHAR_2 = ltrim(rtrim(F_SPARE_CHAR_2))
where 1=1
and left(F_SPARE_CHAR_2,1) = ' '
and len(F_SPARE_CHAR_2) > 0

PRINT ''; PRINT 'Update GCF020_DATA to remove leading spaces on Pivotal Policy'

update GCF020_DATA
	set F_SPARE_CHAR_13 = ltrim(rtrim(F_SPARE_CHAR_13))
where 1=1
and (left(F_SPARE_CHAR_13,1) = ' ') 
and len(F_SPARE_CHAR_13) > 0


PRINT ''; PRINT 'Populate GCF020_UPDATE table - 3 - some tidying for some Claims that SOB instead of S0B in the Policy No.'

update GCF020_DATA
	set F_SPARE_CHAR_2 = 'S0B'+substring(g20.F_SPARE_CHAR_2,4,37)	-- Policy No
--select cae.F_INCIDENT_NUMBER, cae.F_SC2_Policy_No, F_SPARE_CHAR_2 = 'S0B'+substring(g20.F_SPARE_CHAR_2,4,37)
from CLAIM_ANALYSIS_EXTRACT cae
inner join [GCF020_DATA] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER 
inner join (select distinct riskextref from risk) r on 'S0B'+substring(g20.F_SPARE_CHAR_2,4,37) = r.riskextref
where 1=1
and not(cae.rw_result_code_1 in ('010','020','030','031','033','036','100','150'))
and left(g20.F_SPARE_CHAR_2,3) = 'SOB'


-- ************************
-- * END PATCHING UPDATES
-- ************************

PRINT ''; PRINT 'Copy GCF020 table to AFTER update table - delete and insert rows affected'

-- GCF020_DATA AFTER
DELETE [dbo].[GCF020_DATA_AFTER]
insert into [dbo].[GCF020_DATA_AFTER]
select * from [dbo].[GCF020_DATA]


-- Production Update simulation

PRINT ''; PRINT 'Production Update simulation'

PRINT ''; PRINT 'Create test Production test table'


PRINT ''; PRINT 'Drop GCF020_UPDATE table'

if OBJECT_ID('[dbo].[GCF020_UPDATE]') is not null drop table [dbo].[GCF020_UPDATE]

PRINT ''; PRINT 'Create GCF020_UPDATE table'

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE  [dbo].[GCF020_UPDATE](
					[F_CLIENT] [varchar](10) NOT NULL,
					[F_INCIDENT_NUMBER] [varchar](24) NOT NULL,
					[F_MODULE_CODE] [varchar](6) NOT NULL,
					[F_SPARE_CHAR_2] [varchar](40) NULL,
					[F_SPARE_CHAR_13] [varchar](22) NULL
) ON [PRIMARY]


PRINT ''; PRINT 'Populate GCF020_UPDATE table - 1 - based on changing Policy Key Values'

insert into [dbo].[GCF020_UPDATE]
select 
g20a.F_CLIENT,						-- MAIN = DUAL Australia
g20a.F_INCIDENT_NUMBER,				-- Claim No. 
g20a.F_MODULE_CODE,					-- G2
ltrim(rtrim(g20a.F_SPARE_CHAR_2)),	-- Policy No
ltrim(rtrim(g20a.F_SPARE_CHAR_13))	-- Pivotal Policy	

from [GCF020_DATA_BEFORE] g20b
inner join [GCF020_DATA_AFTER] g20a on g20b.F_INCIDENT_NUMBER = g20a.F_INCIDENT_NUMBER 
											and g20b.F_MODULE_CODE = g20a.F_MODULE_CODE
											and g20b.F_ORG_CODE = g20a.F_ORG_CODE
where 1=1
and (ltrim(rtrim(g20a.F_SPARE_CHAR_2)) <> ltrim(rtrim(g20b.F_SPARE_CHAR_2)) or ltrim(rtrim(g20a.F_SPARE_CHAR_13)) <> ltrim(rtrim(g20b.F_SPARE_CHAR_13)))

PRINT ''; PRINT 'Populate GCF020_UPDATE table - 2 - picking up some Claims where the Policy No. or Pivotal Policy has leading space but not recognised as change in the update process'

insert into [dbo].[GCF020_UPDATE]
select 
g20a.F_CLIENT,						-- MAIN = DUAL Australia
g20a.F_INCIDENT_NUMBER,				-- Claim No. 
g20a.F_MODULE_CODE,					-- G2
ltrim(rtrim(g20a.F_SPARE_CHAR_2)),	-- Policy No
ltrim(rtrim(g20a.F_SPARE_CHAR_13))	-- Pivotal Policy	

from [GCF020_DATA_BEFORE] g20b
inner join [GCF020_DATA_AFTER] g20a on g20b.F_INCIDENT_NUMBER = g20a.F_INCIDENT_NUMBER 
											and g20b.F_MODULE_CODE = g20a.F_MODULE_CODE
											and g20b.F_ORG_CODE = g20a.F_ORG_CODE
where 1=1
and ((left(g20b.F_SPARE_CHAR_2,1) = ' ' and len(g20b.F_SPARE_CHAR_2) > 0) or (left(g20b.F_SPARE_CHAR_13,1) = ' ' and len(g20b.F_SPARE_CHAR_13) > 0))
and not(g20a.F_INCIDENT_NUMBER in (select F_INCIDENT_NUMBER from [dbo].[GCF020_UPDATE]))


PRINT ''; PRINT 'Simulate Production table update'

PRINT ''; PRINT 'Copy GCF020 BEFORE table to GCF020 PROD table to simulate PROD update - delete and insert rows affected'

delete [dbo].[GCF020_PROD]
insert into [dbo].[GCF020_PROD]
select * from [dbo].[GCF020_DATA_BEFORE]

PRINT ''; PRINT 'Update GCF020 PROD table with Policy No. and Pivotal Policy No. changes'

update [dbo].[GCF020_PROD]
	set F_SPARE_CHAR_2 = ltrim(rtrim(gu.F_SPARE_CHAR_2)),		-- Policy No.
		F_SPARE_CHAR_13 = ltrim(rtrim(gu.F_SPARE_CHAR_13))		-- Pivotal Policy
--select *
from [dbo].[GCF020_PROD] gp
inner join [dbo].[GCF020_UPDATE] gu on gp.F_INCIDENT_NUMBER = gu.F_INCIDENT_NUMBER 
										and gp.F_MODULE_CODE = gu.F_MODULE_CODE
										

PRINT ''; PRINT 'Copy CLAIM_EXTRACT_ANALYSIS table to AFTER update table - delete and insert rows affected'

-- Backup [CLAIM_ANALYSIS_EXTRACT_AFTER]
DELETE [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
insert into [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
select * from [dbo].[CLAIM_ANALYSIS_EXTRACT]


PRINT ''; PRINT 'Update CLAIM_EXTRACT_ANALYSIS_AFTER table for reporting purposes - 1 - set Policy No and Pivotal Policy to new ones'

-- Backup [CLAIM_ANALYSIS_EXTRACT_AFTER]
update [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
	set F_SC2_Policy_No = g20.F_SPARE_CHAR_2,
		F_SC13_Pivotal_Pol_RW_RISKID = g20.F_SPARE_CHAR_13
--select F_SC2_Policy_No, g20.F_SPARE_CHAR_2, F_SC13_Pivotal_Pol_RW_RISKID, g20.F_SPARE_CHAR_13
from [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER] cae
inner join [dbo].[GCF020_UPDATE] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER


PRINT ''; PRINT 'Update CLAIM_EXTRACT_ANALYSIS_AFTER table for reporting purposes - 2 - set new RiskWrite fields based on new Pivotal Policy'

-- Backup [CLAIM_ANALYSIS_EXTRACT_AFTER]
update [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
	set rw_riskid = r.riskid,
		rw_risk_status = r.riskstatus,
		resolved_riskid = r.riskid,
		rw_inception_date = r.coverstart,
		rw_expiry_date = r.coverend,
		rw_risk_type = r.risktype,
		rw_product_id = r.productid,
		rw_line_of_business = r.lineofbusiness,
		rw_insured_name = c.CLIENTNAME
--select F_SC2_Policy_No, g20.F_SPARE_CHAR_2, F_SC13_Pivotal_Pol_RW_RISKID, g20.F_SPARE_CHAR_13, rw_risk_id = r.riskid,	rw_risk_status = r.riskstatus,alt_rw_riskid = r.riskid,	alt_rw_risk_status = r.riskstatus, resolved_riskid = r.riskid
from [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER] cae
inner join [dbo].[GCF020_UPDATE] g20 on cae.F_INCIDENT_NUMBER = g20.F_INCIDENT_NUMBER
inner join risk r on cae.F_SC13_Pivotal_Pol_RW_RISKID = r.riskid
inner join client c on r.id_clnt = c.ID_CLNT


PRINT ''; PRINT 'Update CLAIM_EXTRACT_ANALYSIS_AFTER table for reporting purposes - 3 - set result code 100 to 40'

-- Backup [CLAIM_ANALYSIS_EXTRACT_AFTER]
update [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER]
	set rw_result_code_1 = '040'
--select F_INCIDENT_NUMBER, F_SC2_Policy_No, F_SC13_Pivotal_Pol_RW_RISKID, rw_result_code_1
from [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER] cae
where 1=1
and rw_result_code_1 = '100'

-- ************************************************************************
-- Extract Table Field Clean Up - Remove special characters like LF and CR 
-- ************************************************************************

PRINT '';PRINT 'Extract Table Field Clean Up - Remove special characters like LF and CR'

--/*
PRINT '';PRINT 'Remove specialcharacters'
DECLARE @specialchars VARCHAR(50) = '%[~,@,#,$,%,&,*,(,),.,!^?:,",]%'

update CLAIM_ANALYSIS_EXTRACT_AFTER
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@specialchars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@specialchars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@specialchars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX(@specialchars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX(@specialchars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC7_Dual_Reference] = Replace(REPLACE([F_SC7_Dual_Reference], SUBSTRING([F_SC7_Dual_Reference], PATINDEX(@specialchars, [F_SC7_Dual_Reference] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @specialchars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @specialchars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @specialchars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @specialchars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @specialchars, [resolved_riskid] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove dodgy characters'
DECLARE @dodgychars VARCHAR(50) =  '%[^-0-9a-zA-Z @.''?:/,+&();_-]%'

update CLAIM_ANALYSIS_EXTRACT_AFTER
	set [rw_insured_name] = Replace(REPLACE([rw_insured_name], SUBSTRING([rw_insured_name], PATINDEX(@dodgychars, [rw_insured_name] ), 1 ),''),'-','-'),
		[wr_insuredname] = Replace(REPLACE([wr_insuredname], SUBSTRING([wr_insuredname], PATINDEX(@dodgychars, [wr_insuredname] ), 1 ),''),'-','-'),
		[bo_company_na] = Replace(REPLACE([bo_company_na], SUBSTRING([bo_company_na], PATINDEX(@dodgychars, [bo_company_na] ), 1 ),''),'-','-'),
		[alt_rw_insured_name] = Replace(REPLACE([alt_rw_insured_name], SUBSTRING([alt_rw_insured_name], PATINDEX( @dodgychars, [alt_rw_insured_name] ), 1 ),''),'-','-'),
		[alt_bo_company_name] = Replace(REPLACE([alt_bo_company_name], SUBSTRING([alt_bo_company_name], PATINDEX( @dodgychars, [alt_bo_company_name] ), 1 ),''),'-','-'),
		[F_SC6_Insured_Name] = Replace(REPLACE([F_SC6_Insured_Name], SUBSTRING([F_SC6_Insured_Name], PATINDEX( @dodgychars, [F_SC6_Insured_Name] ), 1 ),''),'-','-'),
		[F_SC2_Policy_No] = Replace(REPLACE([F_SC2_Policy_No], SUBSTRING([F_SC2_Policy_No], PATINDEX( @dodgychars, [F_SC2_Policy_No] ), 1 ),''),'-','-'),
		[F_SC13_Pivotal_Pol_RW_RISKID] = Replace(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], SUBSTRING([F_SC13_Pivotal_Pol_RW_RISKID], PATINDEX( @dodgychars, [F_SC13_Pivotal_Pol_RW_RISKID] ), 1 ),''),'-','-'),
		[resolved_riskextref] = Replace(REPLACE([resolved_riskextref], SUBSTRING([resolved_riskextref], PATINDEX( @dodgychars, [resolved_riskextref] ), 1 ),''),'-','-'),
		[resolved_riskid] = Replace(REPLACE([resolved_riskid], SUBSTRING([resolved_riskid], PATINDEX( @dodgychars, [resolved_riskid] ), 1 ),''),'-','-')


PRINT '';PRINT 'Remove Reserved word characters again'
update CLAIM_ANALYSIS_EXTRACT_AFTER
	set [rw_insured_name] = REPLACE(REPLACE(REPLACE([rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[wr_insuredname] = REPLACE(REPLACE(REPLACE([wr_insuredname], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[bo_company_na] = REPLACE(REPLACE(REPLACE([bo_company_na], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_rw_insured_name] = REPLACE(REPLACE(REPLACE([alt_rw_insured_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[alt_bo_company_name] = REPLACE(REPLACE(REPLACE([alt_bo_company_name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
 		[F_SC7_Dual_Reference] = REPLACE(REPLACE(REPLACE([F_SC7_Dual_Reference], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC6_Insured_Name] = REPLACE(REPLACE(REPLACE([F_SC6_Insured_Name], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC2_Policy_No] = REPLACE(REPLACE(REPLACE([F_SC2_Policy_No], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[F_SC13_Pivotal_Pol_RW_RISKID] = REPLACE(REPLACE(REPLACE([F_SC13_Pivotal_Pol_RW_RISKID], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskextref] = REPLACE(REPLACE(REPLACE([resolved_riskextref], CHAR(10), ''), CHAR(13), ''), CHAR(63), ''),
		[resolved_riskid] = REPLACE(REPLACE(REPLACE([resolved_riskid], CHAR(10), ''), CHAR(13), ''), CHAR(63), '')


-- ************************************************************************
--  Get some statistics
-- ************************************************************************

PRINT '';PRINT 'Get some statistics'

/*
PRINT '';PRINT 'All Claims by Overall Match Rating'
select 
case when [overall_match_rating] < 5 then '(a) Less Than 5'
	 when [overall_match_rating] between 5 and 7 then '(b) 5, 6, 7' 
	 when [overall_match_rating] > 7 then '(c) 8 or More' end as Final_Match_Rating, 
case when [F_Claim_Status] = 'C' then 'Current' else 'Finalised' end as Claim_Status, 
count(distinct F_INCIDENT_NUMBER) as Claim_Count
from [dbo].[CLAIM_ANALYSIS_EXTRACT]
group by case when [overall_match_rating] < 5 then '(a) Less Than 5'
	 when [overall_match_rating] between 5 and 7 then '(b) 5, 6, 7'  
	 when [overall_match_rating] > 7 then '(c) 8 or More' end, 
case when [F_Claim_Status] = 'C' then 'Current' else 'Finalised' end
order by case when [overall_match_rating] < 5 then '(a) Less Than 5'
	 when [overall_match_rating] between 5 and 7 then '(b) 5, 6, 7' 
	 when [overall_match_rating] > 7 then '(c) 8 or More' end, 
case when [F_Claim_Status] = 'C' then 'Current' else 'Finalised' end
*/

--PRINT '';PRINT 'Result Code analysis'

--select 
--cae.rw_result_code_1 as [Result Code],
--count(distinct cae.F_INCIDENT_NUMBER) as Claim_Count,
--mrc.[Policy No/Pivotal Policy/Condition],
--mrc.[Result_Description]
--from [dbo].[CLAIM_ANALYSIS_EXTRACT_AFTER] cae
--inner join [dbo].[FIGTREE_CLAIMS_MATCHING_RESULT_CODES] mrc on cae.rw_result_code_1 = mrc.Result_Code
--where 1=1
----and not(rw_result_code_1 in ('100'))
--group by cae.rw_result_code_1, mrc.[Result_Description], mrc.[Policy No/Pivotal Policy/Condition]
--order by cae.rw_result_code_1


PRINT '';PRINT 'Show Claim Count and Claim Financials for Reconciliation'

select 'Reconciliation' as Information, count(distinct F_INCIDENT_NUMBER) as [FigTree Claim Count], 
sum(F_PAID_LTD) as Paid, sum(F_ESTIMATE_YOURS) as Estimate, sum(F_RECOVERED_LTD) as Recovered, sum(F_TOTAL_INCURRED) as Incurred
from GCF020_DATA


PRINT ''; PRINT 'Produce output file from GCF020_UPDATE - these are the Claim records that need updating in FigTree' 
PRINT 'Copy and paste this output into a spreadsheet and send to FTT'

SELECT [F_CLIENT],
	   [F_INCIDENT_NUMBER]
      ,[F_MODULE_CODE]
      ,[F_SPARE_CHAR_2]
      ,[F_SPARE_CHAR_13]
FROM [RiskWriteApac].[dbo].[GCF020_UPDATE]
order by [F_INCIDENT_NUMBER]


-- ****************************************************************************************************************************************
-- * END LINE FOR RUN 1 & 2 *** END LINE FOR RUN 1 & 2 *** END LINE FOR RUN 1 & 2 *** END LINE FOR RUN 1 & 2 *** END LINE FOR RUN 1 & 2 *** 
-- ****************************************************************************************************************************************

